// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcsrv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PodInfoSvcClient is the client API for PodInfoSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PodInfoSvcClient interface {
	Get(ctx context.Context, in *PodInfoReq, opts ...grpc.CallOption) (*PodInfoRepl, error)
}

type podInfoSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewPodInfoSvcClient(cc grpc.ClientConnInterface) PodInfoSvcClient {
	return &podInfoSvcClient{cc}
}

func (c *podInfoSvcClient) Get(ctx context.Context, in *PodInfoReq, opts ...grpc.CallOption) (*PodInfoRepl, error) {
	out := new(PodInfoRepl)
	err := c.cc.Invoke(ctx, "/grpcsrv.PodInfoSvc/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodInfoSvcServer is the server API for PodInfoSvc service.
// All implementations must embed UnimplementedPodInfoSvcServer
// for forward compatibility
type PodInfoSvcServer interface {
	Get(context.Context, *PodInfoReq) (*PodInfoRepl, error)
	mustEmbedUnimplementedPodInfoSvcServer()
}

// UnimplementedPodInfoSvcServer must be embedded to have forward compatible implementations.
type UnimplementedPodInfoSvcServer struct {
}

func (UnimplementedPodInfoSvcServer) Get(context.Context, *PodInfoReq) (*PodInfoRepl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPodInfoSvcServer) mustEmbedUnimplementedPodInfoSvcServer() {}

// UnsafePodInfoSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodInfoSvcServer will
// result in compilation errors.
type UnsafePodInfoSvcServer interface {
	mustEmbedUnimplementedPodInfoSvcServer()
}

func RegisterPodInfoSvcServer(s grpc.ServiceRegistrar, srv PodInfoSvcServer) {
	s.RegisterService(&_PodInfoSvc_serviceDesc, srv)
}

func _PodInfoSvc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodInfoSvcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcsrv.PodInfoSvc/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodInfoSvcServer).Get(ctx, req.(*PodInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PodInfoSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcsrv.PodInfoSvc",
	HandlerType: (*PodInfoSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PodInfoSvc_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "podinfo_api.proto",
}
