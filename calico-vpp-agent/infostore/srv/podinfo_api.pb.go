// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: podinfo_api.proto

package srv

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Address structure describes a single instance of an address assigned to the pod
type Address struct {
	Addr                 []byte   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	MaskLen              int32    `protobuf:"varint,2,opt,name=mask_len,json=maskLen,proto3" json:"mask_len,omitempty"`
	IsIpv6               bool     `protobuf:"varint,3,opt,name=is_ipv6,json=isIpv6,proto3" json:"is_ipv6,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cdd5668acb30bba, []int{0}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *Address) GetMaskLen() int32 {
	if m != nil {
		return m.MaskLen
	}
	return 0
}

func (m *Address) GetIsIpv6() bool {
	if m != nil {
		return m.IsIpv6
	}
	return false
}

// PodInfo structure describes information returning by gRPC server with details
// about requested pod
type PodInfo struct {
	TableId              int32      `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	PortName             string     `protobuf:"bytes,2,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	PodAddr              []*Address `protobuf:"bytes,3,rep,name=pod_addr,json=podAddr,proto3" json:"pod_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PodInfo) Reset()         { *m = PodInfo{} }
func (m *PodInfo) String() string { return proto.CompactTextString(m) }
func (*PodInfo) ProtoMessage()    {}
func (*PodInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cdd5668acb30bba, []int{1}
}
func (m *PodInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodInfo.Unmarshal(m, b)
}
func (m *PodInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodInfo.Marshal(b, m, deterministic)
}
func (m *PodInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodInfo.Merge(m, src)
}
func (m *PodInfo) XXX_Size() int {
	return xxx_messageInfo_PodInfo.Size(m)
}
func (m *PodInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PodInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PodInfo proto.InternalMessageInfo

func (m *PodInfo) GetTableId() int32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *PodInfo) GetPortName() string {
	if m != nil {
		return m.PortName
	}
	return ""
}

func (m *PodInfo) GetPodAddr() []*Address {
	if m != nil {
		return m.PodAddr
	}
	return nil
}

// PodInfoReq structure describes information sent to gRPC server, it includes:
// request id - to track requests, namespace - pod's actual namespace,
// and pod id - the actual pod's UUID.
type PodInfoReq struct {
	ReqId                int32    `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodId                string   `protobuf:"bytes,3,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodInfoReq) Reset()         { *m = PodInfoReq{} }
func (m *PodInfoReq) String() string { return proto.CompactTextString(m) }
func (*PodInfoReq) ProtoMessage()    {}
func (*PodInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cdd5668acb30bba, []int{2}
}
func (m *PodInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodInfoReq.Unmarshal(m, b)
}
func (m *PodInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodInfoReq.Marshal(b, m, deterministic)
}
func (m *PodInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodInfoReq.Merge(m, src)
}
func (m *PodInfoReq) XXX_Size() int {
	return xxx_messageInfo_PodInfoReq.Size(m)
}
func (m *PodInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PodInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_PodInfoReq proto.InternalMessageInfo

func (m *PodInfoReq) GetReqId() int32 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *PodInfoReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PodInfoReq) GetPodId() string {
	if m != nil {
		return m.PodId
	}
	return ""
}

// PodInfoRepl structure describes information returned by gRPC server to
// the requesting process.
// In case of a failure of getting requested pod's info, gRPC server returns
// a number error code and well as details error desccription.
type PodInfoRepl struct {
	PodInfo              *PodInfo `protobuf:"bytes,1,opt,name=pod_info,json=podInfo,proto3" json:"pod_info,omitempty"`
	Err                  int32    `protobuf:"varint,2,opt,name=err,proto3" json:"err,omitempty"`
	ErrDetail            string   `protobuf:"bytes,3,opt,name=err_detail,json=errDetail,proto3" json:"err_detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodInfoRepl) Reset()         { *m = PodInfoRepl{} }
func (m *PodInfoRepl) String() string { return proto.CompactTextString(m) }
func (*PodInfoRepl) ProtoMessage()    {}
func (*PodInfoRepl) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cdd5668acb30bba, []int{3}
}
func (m *PodInfoRepl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodInfoRepl.Unmarshal(m, b)
}
func (m *PodInfoRepl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodInfoRepl.Marshal(b, m, deterministic)
}
func (m *PodInfoRepl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodInfoRepl.Merge(m, src)
}
func (m *PodInfoRepl) XXX_Size() int {
	return xxx_messageInfo_PodInfoRepl.Size(m)
}
func (m *PodInfoRepl) XXX_DiscardUnknown() {
	xxx_messageInfo_PodInfoRepl.DiscardUnknown(m)
}

var xxx_messageInfo_PodInfoRepl proto.InternalMessageInfo

func (m *PodInfoRepl) GetPodInfo() *PodInfo {
	if m != nil {
		return m.PodInfo
	}
	return nil
}

func (m *PodInfoRepl) GetErr() int32 {
	if m != nil {
		return m.Err
	}
	return 0
}

func (m *PodInfoRepl) GetErrDetail() string {
	if m != nil {
		return m.ErrDetail
	}
	return ""
}

func init() {
	proto.RegisterType((*Address)(nil), "srv.Address")
	proto.RegisterType((*PodInfo)(nil), "srv.PodInfo")
	proto.RegisterType((*PodInfoReq)(nil), "srv.PodInfoReq")
	proto.RegisterType((*PodInfoRepl)(nil), "srv.PodInfoRepl")
}

func init() { proto.RegisterFile("podinfo_api.proto", fileDescriptor_1cdd5668acb30bba) }

var fileDescriptor_1cdd5668acb30bba = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x4f, 0x6b, 0xe3, 0x30,
	0x10, 0xc5, 0xf1, 0x7a, 0x1d, 0xdb, 0x93, 0xc0, 0x66, 0x05, 0xa5, 0xe9, 0x3f, 0x30, 0xbe, 0xd4,
	0xa7, 0x1c, 0x52, 0xc8, 0xbd, 0xa5, 0x50, 0x0c, 0xa5, 0xb4, 0xea, 0xa5, 0xf4, 0x62, 0x94, 0xcc,
	0xa4, 0xa8, 0x75, 0x2c, 0x59, 0x32, 0xfe, 0xfc, 0x45, 0xc2, 0x4e, 0xc8, 0x6d, 0xf4, 0xd0, 0xbc,
	0xdf, 0x9b, 0x19, 0xf8, 0xaf, 0x15, 0xca, 0x66, 0xa7, 0x2a, 0xa1, 0xe5, 0x52, 0x1b, 0xd5, 0x29,
	0x16, 0x5a, 0xd3, 0xe7, 0x6f, 0x10, 0xdf, 0x23, 0x1a, 0xb2, 0x96, 0x31, 0xf8, 0x2b, 0x10, 0xcd,
	0x22, 0xc8, 0x82, 0x62, 0xc6, 0x7d, 0xcd, 0x2e, 0x20, 0xd9, 0x0b, 0xfb, 0x53, 0xd5, 0xd4, 0x2c,
	0xfe, 0x64, 0x41, 0x11, 0xf1, 0xd8, 0xbd, 0x9f, 0xa9, 0x61, 0xe7, 0x10, 0x4b, 0x5b, 0x49, 0xdd,
	0xaf, 0x17, 0x61, 0x16, 0x14, 0x09, 0x9f, 0x48, 0x5b, 0xea, 0x7e, 0x9d, 0x7f, 0x43, 0xfc, 0xaa,
	0xb0, 0x6c, 0x76, 0xca, 0xb5, 0x77, 0x62, 0x53, 0x53, 0x25, 0xd1, 0xdb, 0x46, 0x3c, 0xf6, 0xef,
	0x12, 0xd9, 0x15, 0xa4, 0x5a, 0x99, 0xae, 0x6a, 0xc4, 0x9e, 0xbc, 0x75, 0xca, 0x13, 0x27, 0xbc,
	0x88, 0x3d, 0xb1, 0x5b, 0x48, 0xb4, 0xc2, 0xca, 0xc7, 0x09, 0xb3, 0xb0, 0x98, 0xae, 0x66, 0x4b,
	0x6b, 0xfa, 0xe5, 0x10, 0x95, 0xc7, 0x5a, 0xa1, 0xab, 0xf3, 0x0f, 0x80, 0x81, 0xc5, 0xa9, 0x65,
	0x67, 0x30, 0x31, 0xd4, 0x1e, 0x61, 0x91, 0xa1, 0xb6, 0x44, 0x76, 0x0d, 0xa9, 0xa3, 0x58, 0x2d,
	0xb6, 0x23, 0xea, 0x28, 0xb8, 0x26, 0xc7, 0x92, 0xe8, 0xc7, 0x48, 0x79, 0xa4, 0x15, 0x96, 0x98,
	0x7f, 0xc1, 0xf4, 0xe0, 0xac, 0xeb, 0x31, 0x91, 0x5b, 0xa1, 0x37, 0x1f, 0x13, 0x8d, 0x7f, 0x5c,
	0x22, 0x3f, 0xf2, 0x1c, 0x42, 0x32, 0x66, 0x58, 0x96, 0x2b, 0xd9, 0x0d, 0x00, 0x19, 0x53, 0x21,
	0x75, 0x42, 0xd6, 0x03, 0x24, 0x25, 0x63, 0x1e, 0xbd, 0xb0, 0x5a, 0x1f, 0x46, 0x78, 0xef, 0xb7,
	0xac, 0x80, 0xf0, 0x89, 0x3a, 0xf6, 0xef, 0xc4, 0x9c, 0xda, 0xcb, 0xf9, 0xa9, 0xa0, 0xeb, 0x87,
	0xe8, 0xd3, 0x1d, 0x70, 0x33, 0xf1, 0xc7, 0xbc, 0xfb, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x59,
	0x85, 0x2c, 0xe1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PodInfoSvcClient is the client API for PodInfoSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PodInfoSvcClient interface {
	Get(ctx context.Context, in *PodInfoReq, opts ...grpc.CallOption) (*PodInfoRepl, error)
}

type podInfoSvcClient struct {
	cc *grpc.ClientConn
}

func NewPodInfoSvcClient(cc *grpc.ClientConn) PodInfoSvcClient {
	return &podInfoSvcClient{cc}
}

func (c *podInfoSvcClient) Get(ctx context.Context, in *PodInfoReq, opts ...grpc.CallOption) (*PodInfoRepl, error) {
	out := new(PodInfoRepl)
	err := c.cc.Invoke(ctx, "/srv.PodInfoSvc/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodInfoSvcServer is the server API for PodInfoSvc service.
type PodInfoSvcServer interface {
	Get(context.Context, *PodInfoReq) (*PodInfoRepl, error)
}

// UnimplementedPodInfoSvcServer can be embedded to have forward compatible implementations.
type UnimplementedPodInfoSvcServer struct {
}

func (*UnimplementedPodInfoSvcServer) Get(ctx context.Context, req *PodInfoReq) (*PodInfoRepl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterPodInfoSvcServer(s *grpc.Server, srv PodInfoSvcServer) {
	s.RegisterService(&_PodInfoSvc_serviceDesc, srv)
}

func _PodInfoSvc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodInfoSvcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv.PodInfoSvc/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodInfoSvcServer).Get(ctx, req.(*PodInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PodInfoSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "srv.PodInfoSvc",
	HandlerType: (*PodInfoSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PodInfoSvc_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "podinfo_api.proto",
}
