From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nathan Skrzypczak <nathan.skrzypczak@gmail.com>
Date: Tue, 27 Jul 2021 09:41:55 +0200
Subject: [PATCH 1/5] pbl: Port based balancer

Type: feature

This is a POC for doing ABF like filtering
but only with destination ports in the FIB.
The target use-case is directing a range of ports
to a memif while directing the rest of the traffic
to a tuntap.

Change-Id: I2af9ce0b28838838f575395bb16e0bc14ff593f7
Signed-off-by: Nathan Skrzypczak <nathan.skrzypczak@gmail.com>
---
 MAINTAINERS                    |   5 +
 src/plugins/pbl/CMakeLists.txt |  22 ++
 src/plugins/pbl/FEATURE.yaml   |   8 +
 src/plugins/pbl/pbl.api        |  89 +++++
 src/plugins/pbl/pbl_api.c      | 179 +++++++++++
 src/plugins/pbl/pbl_client.c   | 570 +++++++++++++++++++++++++++++++++
 src/plugins/pbl/pbl_client.h   | 191 +++++++++++
 src/plugins/pbl/pbl_error.def  |  16 +
 src/plugins/pbl/pbl_node.c     | 183 +++++++++++
 9 files changed, 1263 insertions(+)
 create mode 100644 src/plugins/pbl/CMakeLists.txt
 create mode 100644 src/plugins/pbl/FEATURE.yaml
 create mode 100644 src/plugins/pbl/pbl.api
 create mode 100644 src/plugins/pbl/pbl_api.c
 create mode 100644 src/plugins/pbl/pbl_client.c
 create mode 100644 src/plugins/pbl/pbl_client.h
 create mode 100644 src/plugins/pbl/pbl_error.def
 create mode 100644 src/plugins/pbl/pbl_node.c

diff --git a/MAINTAINERS b/MAINTAINERS
index 5701ebdd9..37d183f6b 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -700,6 +700,11 @@ I:	svs
 M:	Neale Ranns <neale@graphiant.com>
 F:	src/plugins/svs/
 
+Plugin - PBL
+I:	pbl
+M:	Nathan Skrzypczak <nathan.skrzypczak@gmail.com>
+F:	src/plugins/pbl
+
 Plugin - IPv6 Connection Tracker
 I:	ct6
 M:	Dave Barach <vpp@barachs.net>
diff --git a/src/plugins/pbl/CMakeLists.txt b/src/plugins/pbl/CMakeLists.txt
new file mode 100644
index 000000000..a4ce971c2
--- /dev/null
+++ b/src/plugins/pbl/CMakeLists.txt
@@ -0,0 +1,22 @@
+# Copyright (c) 2021 Cisco and/or its affiliates.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at:
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+add_vpp_plugin(pbl
+  SOURCES
+  pbl_client.c
+  pbl_node.c
+  pbl_api.c
+
+  API_FILES
+  pbl.api
+)
diff --git a/src/plugins/pbl/FEATURE.yaml b/src/plugins/pbl/FEATURE.yaml
new file mode 100644
index 000000000..34f3a479f
--- /dev/null
+++ b/src/plugins/pbl/FEATURE.yaml
@@ -0,0 +1,8 @@
+---
+name: PBL (Port based Balencer)
+maintainer: Nathan Skrzypczak <nathan.skrzypczak@gmail.com>
+features:
+  - Port based balancer
+description: "Feature that enables selective punting of flows to an interface"
+state: experimental
+properties: [MULTITHREAD]
diff --git a/src/plugins/pbl/pbl.api b/src/plugins/pbl/pbl.api
new file mode 100644
index 000000000..eada35314
--- /dev/null
+++ b/src/plugins/pbl/pbl.api
@@ -0,0 +1,89 @@
+/* Hey Emacs use -*- mode: C -*- */
+/*
+ * Copyright (c) 2021 Cisco and/or its affiliates.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/** \file
+    This file defines the vpp control-plane API messages
+    used to control the PBL plugin
+*/
+
+option version = "0.1.0";
+import "vnet/ip/ip_types.api";
+import "vnet/fib/fib_types.api";
+import "vnet/interface_types.api";
+
+enum pbl_client_flags
+{
+  PBL_API_FLAG_EXCLUSIVE = 1,
+};
+
+typedef pbl_port_range
+{
+    u16 start;
+    u16 end;
+    vl_api_ip_proto_t iproto;
+};
+
+typedef pbl_client
+{
+  u32 id [default=0xffffffff];
+  vl_api_address_t addr;
+  vl_api_fib_path_t paths; /* we support only one now due to api limit */
+  u8 flags;
+  u32 table_id;
+  u32 n_ports;
+  vl_api_pbl_port_range_t port_ranges[n_ports];
+};
+
+define pbl_client_update
+{
+  u32 client_index;
+  u32 context;
+  vl_api_pbl_client_t client;
+};
+
+define pbl_client_update_reply
+{
+  u32 context;
+  i32 retval;
+  u32 id;
+};
+
+autoreply define pbl_client_del
+{
+  u32 client_index;
+  u32 context;
+  u32 id;
+};
+
+define pbl_client_details
+{
+  u32 context;
+  vl_api_pbl_client_t client;
+};
+
+define pbl_client_dump
+{
+  u32 client_index;
+  u32 context;
+};
+
+/*
+ * fd.io coding-style-patch-verification: ON
+ *
+ * Local Variables:
+ * eval: (c-set-style "gnu")
+ * End:
+ */
diff --git a/src/plugins/pbl/pbl_api.c b/src/plugins/pbl/pbl_api.c
new file mode 100644
index 000000000..e948357b0
--- /dev/null
+++ b/src/plugins/pbl/pbl_api.c
@@ -0,0 +1,179 @@
+/*
+ * Copyright (c) 2016 Cisco and/or its affiliates.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <stddef.h>
+
+#include <vnet/vnet.h>
+#include <vnet/plugin/plugin.h>
+#include <pbl/pbl_client.h>
+
+#include <vnet/ip/ip_types_api.h>
+
+#include <vpp/app/version.h>
+#include <vnet/fib/fib_api.h>
+
+#include <vlibapi/api.h>
+#include <vlibmemory/api.h>
+
+/* define message IDs */
+#include <vnet/format_fns.h>
+#include <pbl/pbl.api_enum.h>
+#include <pbl/pbl.api_types.h>
+
+/**
+ * Base message ID fot the plugin
+ */
+static u32 pbl_base_msg_id;
+
+#define REPLY_MSG_ID_BASE pbl_base_msg_id
+
+#include <vlibapi/api_helper_macros.h>
+
+static void
+vl_api_pbl_client_update_t_handler (vl_api_pbl_client_update_t *mp)
+{
+  pbl_client_update_args_t _args = { 0 }, *args = &_args;
+  vl_api_pbl_client_update_reply_t *rmp;
+  pbl_client_port_map_proto_t proto;
+  fib_route_path_t *rpath;
+  ip_protocol_t iproto;
+  int rv = 0;
+  u32 ii, n_ports;
+  u16 port_a, port_b;
+
+  args->pci = clib_net_to_host_u32 (mp->client.id);
+  ip_address_decode2 (&mp->client.addr, &args->addr);
+
+  for (ii = 0; ii < PBL_CLIENT_PORT_MAP_N_PROTOS; ii++)
+    {
+      clib_bitmap_alloc (args->port_maps[ii], (1 << 16) - 1);
+      clib_bitmap_zero (args->port_maps[ii]);
+    }
+
+  n_ports = clib_net_to_host_u32 (mp->client.n_ports);
+  for (ii = 0; ii < n_ports; ii++)
+    {
+      port_a = clib_net_to_host_u16 (mp->client.port_ranges[ii].start);
+      port_b = clib_net_to_host_u16 (mp->client.port_ranges[ii].end);
+      port_b = clib_max (port_a, port_b);
+
+      rv = ip_proto_decode (mp->client.port_ranges[ii].iproto, &iproto);
+      if (rv)
+	goto done;
+      proto = pbl_iproto_to_port_map_proto (iproto);
+
+      if (proto < PBL_CLIENT_PORT_MAP_N_PROTOS)
+	clib_bitmap_set_region (args->port_maps[proto], port_a, 1,
+				port_b - port_a + 1);
+    }
+  args->flags = mp->client.flags;
+  args->table_id = clib_net_to_host_u32 (mp->client.table_id);
+
+  vec_validate (args->rpaths, 0);
+  rpath = &args->rpaths[0];
+
+  rv = fib_api_path_decode (&mp->client.paths, rpath);
+  if (rv)
+    goto done;
+
+  args->pci = pbl_client_update (args);
+
+done:
+  vec_free (args->rpaths);
+
+  REPLY_MACRO2 (VL_API_PBL_CLIENT_UPDATE_REPLY,
+		({ rmp->id = clib_host_to_net_u32 (args->pci); }));
+}
+
+static void
+vl_api_pbl_client_del_t_handler (vl_api_pbl_client_del_t *mp)
+{
+  vl_api_pbl_client_del_reply_t *rmp;
+  int rv;
+
+  rv = pbl_client_delete (ntohl (mp->id));
+
+  REPLY_MACRO (VL_API_PBL_CLIENT_DEL_REPLY);
+}
+
+typedef struct pbl_dump_walk_ctx_t_
+{
+  vl_api_registration_t *rp;
+  u32 context;
+} pbl_dump_walk_ctx_t;
+
+static walk_rc_t
+pbl_client_send_details (u32 cti, void *args)
+{
+  vl_api_pbl_client_details_t *mp;
+  pbl_dump_walk_ctx_t *ctx;
+  size_t msg_size;
+  pbl_client_t *pc;
+
+  ctx = args;
+  pc = pbl_client_get (cti);
+  msg_size = sizeof (*mp);
+
+  mp = vl_msg_api_alloc_zero (msg_size);
+  mp->_vl_msg_id = ntohs (VL_API_PBL_CLIENT_DETAILS + pbl_base_msg_id);
+
+  mp->client.id = clib_host_to_net_u32 (cti);
+  ip_address_encode2 (&pc->pc_addr, &mp->client.addr);
+  mp->client.flags = clib_host_to_net_u32 (pc->flags);
+
+  /* TODO : we miss routes & ports */
+
+  vl_api_send_msg (ctx->rp, (u8 *) mp);
+
+  return (WALK_CONTINUE);
+}
+
+static void
+vl_api_pbl_client_dump_t_handler (vl_api_pbl_client_dump_t *mp)
+{
+  vl_api_registration_t *rp;
+
+  rp = vl_api_client_index_to_registration (mp->client_index);
+  if (rp == 0)
+    return;
+
+  pbl_dump_walk_ctx_t ctx = {
+    .rp = rp,
+    .context = mp->context,
+  };
+
+  pbl_client_walk (pbl_client_send_details, &ctx);
+}
+
+#include <pbl/pbl.api.c>
+
+static clib_error_t *
+pbl_api_init (vlib_main_t *vm)
+{
+  /* Ask for a correctly-sized block of API message decode slots */
+  pbl_base_msg_id = setup_message_id_table ();
+
+  return 0;
+}
+
+VLIB_INIT_FUNCTION (pbl_api_init);
+
+/*
+ * fd.io coding-style-patch-verification: ON
+ *
+ * Local Variables:
+ * eval: (c-set-style "gnu")
+ * End:
+ */
diff --git a/src/plugins/pbl/pbl_client.c b/src/plugins/pbl/pbl_client.c
new file mode 100644
index 000000000..dc527ca25
--- /dev/null
+++ b/src/plugins/pbl/pbl_client.c
@@ -0,0 +1,570 @@
+/*
+ * Copyright (c) 2020 Cisco and/or its affiliates.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <vnet/fib/fib_source.h>
+#include <vnet/fib/fib_table.h>
+#include <vnet/fib/fib_entry_track.h>
+#include <vnet/fib/fib_path_list.h>
+#include <vnet/dpo/load_balance.h>
+#include <vnet/dpo/drop_dpo.h>
+#include <vnet/plugin/plugin.h>
+#include <vpp/app/version.h>
+
+#include <pbl/pbl_client.h>
+
+char *pbl_error_strings[] = {
+#define pbl_error(n, s) s,
+#include <pbl/pbl_error.def>
+#undef pbl_error
+};
+
+pbl_client_t *pbl_client_pool;
+fib_source_t pbl_fib_source;
+dpo_type_t pbl_client_dpo;
+
+static fib_node_type_t pbl_client_fib_node_type;
+
+static_always_inline u8
+pbl_client_is_clone (pbl_client_t *pc)
+{
+  return (FIB_NODE_INDEX_INVALID == pc->pc_fei);
+}
+
+static u8 *
+format_pbl_ports (u8 *s, va_list *args)
+{
+  clib_bitmap_t *map = va_arg (*args, clib_bitmap_t *);
+  if (NULL == map)
+    {
+      s = format (s, "(empty)");
+      return (s);
+    }
+  u32 last, cur, next_set, next_clear;
+  last = clib_bitmap_last_set (map);
+  cur = clib_bitmap_first_set (map);
+
+  if (cur == (u32) -1)
+    {
+      s = format (s, "(empty)");
+      return (s);
+    }
+
+  while (cur <= last)
+    {
+      next_set = clib_bitmap_next_set (map, cur);
+      next_clear = clib_bitmap_next_clear (map, next_set + 1);
+      if (next_clear == next_set + 1)
+	s = format (s, " %d", next_set);
+      else
+	s = format (s, " %d-%d", next_set, next_clear - 1);
+      cur = next_clear;
+    }
+
+  return (s);
+}
+
+u8 *
+format_pbl_client (u8 *s, va_list *args)
+{
+  index_t pci = va_arg (*args, index_t);
+  pbl_client_t *pc = pool_elt_at_index (pbl_client_pool, pci);
+  u32 indent = va_arg (*args, u32);
+
+  s = format (s, "%U[%d] pbl-client: %U", format_white_space, indent, pci,
+	      format_ip_address, &pc->pc_addr);
+
+  if (pc->flags & PBL_FLAG_EXCLUSIVE)
+    s = format (s, " exclusive");
+
+  if (!pbl_client_is_clone (pc) && INDEX_INVALID != pc->clone_pci)
+    {
+      s = format (s, " clone:%d", pc->clone_pci);
+      return (s);
+    }
+
+  s = format (s, "\n%UTCP ports:%U", format_white_space, indent + 2,
+	      format_pbl_ports, pc->pc_port_maps[PBL_CLIENT_PORT_MAP_TCP]);
+
+  s = format (s, "\n%UUDP ports:%U", format_white_space, indent + 2,
+	      format_pbl_ports, pc->pc_port_maps[PBL_CLIENT_PORT_MAP_UDP]);
+
+  s = format (s, "\n%Umatched dpo\n%U%U", format_white_space, indent + 2,
+	      format_white_space, indent + 4, format_dpo_id, &pc->pc_dpo,
+	      indent + 4);
+
+  if (pbl_client_is_clone (pc))
+    {
+      s = format (s, "\n%Udefault dpo\n%U%U", format_white_space, indent + 2,
+		  format_white_space, indent + 4, format_dpo_id,
+		  &pc->pc_parent, indent + 4);
+    }
+
+  return (s);
+}
+
+/**
+ * Interpose a policy DPO
+ */
+static void
+pbl_client_dpo_interpose (const dpo_id_t *original, const dpo_id_t *parent,
+			  dpo_id_t *clone)
+{
+  pbl_client_t *pc, *pc_clone;
+  int ii;
+
+  pool_get_zero (pbl_client_pool, pc_clone);
+  pc = pbl_client_get (original->dpoi_index);
+
+  pc_clone->pc_fei = FIB_NODE_INDEX_INVALID;
+  pc_clone->clone_pci = INDEX_INVALID;
+  ip_address_copy (&pc_clone->pc_addr, &pc->pc_addr);
+  pc_clone->flags = pc->flags;
+  for (ii = 0; ii < PBL_CLIENT_PORT_MAP_N_PROTOS; ii++)
+    pc_clone->pc_port_maps[ii] = pc->pc_port_maps[ii];
+
+  dpo_copy (&pc_clone->pc_dpo, &pc->pc_dpo);
+
+  pc->clone_pci = pc_clone - pbl_client_pool;
+
+  /* stack the clone on the FIB provided parent */
+  dpo_stack (pbl_client_dpo, original->dpoi_proto, &pc_clone->pc_parent,
+	     parent);
+
+  /* return the clone */
+  dpo_set (clone, pbl_client_dpo, original->dpoi_proto,
+	   pc_clone - pbl_client_pool);
+}
+
+static clib_error_t *
+pbl_client_show (vlib_main_t *vm, unformat_input_t *input,
+		 vlib_cli_command_t *cmd)
+{
+  index_t pci;
+
+  pci = INDEX_INVALID;
+
+  while (unformat_check_input (input) != UNFORMAT_END_OF_INPUT)
+    {
+      if (unformat (input, "%d", &pci))
+	;
+      else
+	return (clib_error_return (0, "unknown input '%U'",
+				   format_unformat_error, input));
+    }
+
+  if (INDEX_INVALID == pci)
+    {
+      pool_foreach_index (pci, pbl_client_pool)
+	vlib_cli_output (vm, "%U", format_pbl_client, pci, 0);
+    }
+
+  return (NULL);
+}
+
+VLIB_CLI_COMMAND (pbl_client_show_cmd_node, static) = {
+  .path = "show pbl client",
+  .function = pbl_client_show,
+  .short_help = "show pbl client",
+  .is_mp_safe = 1,
+};
+
+const static char *const pbl_client_dpo_ip4_nodes[] = {
+  "ip4-pbl-tx",
+  NULL,
+};
+
+const static char *const pbl_client_dpo_ip6_nodes[] = {
+  "ip6-pbl-tx",
+  NULL,
+};
+
+const static char *const *const pbl_client_dpo_nodes[DPO_PROTO_NUM] = {
+  [DPO_PROTO_IP4] = pbl_client_dpo_ip4_nodes,
+  [DPO_PROTO_IP6] = pbl_client_dpo_ip6_nodes,
+};
+
+static void
+pbl_client_dpo_lock (dpo_id_t *dpo)
+{
+  pbl_client_t *pc;
+
+  pc = pbl_client_get (dpo->dpoi_index);
+
+  pc->pc_locks++;
+}
+
+static void
+pbl_client_dpo_unlock (dpo_id_t *dpo)
+{
+  pbl_client_t *pc;
+
+  pc = pbl_client_get (dpo->dpoi_index);
+
+  pc->pc_locks--;
+
+  if (0 == pc->pc_locks)
+    {
+      ASSERT (pbl_client_is_clone (pc));
+      dpo_reset (&pc->pc_parent);
+      pool_put (pbl_client_pool, pc);
+    }
+}
+
+u8 *
+format_pbl_client_dpo (u8 *s, va_list *ap)
+{
+  index_t pci = va_arg (*ap, index_t);
+  u32 indent = va_arg (*ap, u32);
+
+  s = format (s, "\n%U", format_pbl_client, pci, indent);
+
+  return (s);
+}
+
+const static dpo_vft_t pbl_client_dpo_vft = {
+  .dv_lock = pbl_client_dpo_lock,
+  .dv_unlock = pbl_client_dpo_unlock,
+  .dv_format = format_pbl_client_dpo,
+  .dv_mk_interpose = pbl_client_dpo_interpose,
+};
+
+static void
+pbl_client_stack (pbl_client_t *pc)
+{
+  dpo_id_t dpo = DPO_INVALID;
+  fib_protocol_t fproto;
+  vlib_node_t *pnode;
+  pbl_client_t *pc_clone;
+
+  fproto = ip_address_family_to_fib_proto (pc->pc_addr.version);
+  fib_path_list_contribute_forwarding (
+    pc->pc_pl, fib_forw_chain_type_from_fib_proto (fproto),
+    FIB_PATH_LIST_FWD_FLAG_COLLAPSE, &dpo);
+
+  if (AF_IP4 == pc->pc_addr.version)
+    pnode = vlib_get_node_by_name (vlib_get_main (), (u8 *) "ip4-pbl-tx");
+  else
+    pnode = vlib_get_node_by_name (vlib_get_main (), (u8 *) "ip6-pbl-tx");
+
+  dpo_stack_from_node (pnode->index, &pc->pc_dpo, &dpo);
+
+  if (INDEX_INVALID != pc->clone_pci)
+    {
+      pc_clone = pbl_client_get_if_exists (pc->clone_pci);
+      if (pc_clone)
+	dpo_copy (&pc_clone->pc_dpo, &pc->pc_dpo);
+    }
+
+  dpo_reset (&dpo);
+
+  pc->flags |= PBL_CLIENT_STACKED;
+}
+
+int
+pbl_client_delete (u32 id)
+{
+  pbl_client_t *pc;
+  int ii;
+
+  if (pool_is_free_index (pbl_client_pool, id))
+    return (VNET_API_ERROR_NO_SUCH_ENTRY);
+
+  pc = pool_elt_at_index (pbl_client_pool, id);
+
+  fib_path_list_child_remove (pc->pc_pl, pc->pc_sibling);
+
+  dpo_reset (&pc->pc_dpo);
+
+  ASSERT (!pbl_client_is_clone (pc));
+
+  ASSERT (fib_entry_is_sourced (pc->pc_fei, pbl_fib_source));
+  fib_table_entry_delete_index (pc->pc_fei, pbl_fib_source);
+
+  for (ii = 0; ii < PBL_CLIENT_PORT_MAP_N_PROTOS; ii++)
+    clib_bitmap_free (pc->pc_port_maps[ii]);
+
+  dpo_reset (&pc->pc_parent);
+  pool_put (pbl_client_pool, pc);
+
+  return (0);
+}
+
+u32
+pbl_client_update (pbl_client_update_args_t *args)
+{
+  pbl_client_t *pc;
+  dpo_id_t tmp = DPO_INVALID;
+  fib_node_index_t fei;
+  dpo_proto_t dproto;
+  fib_prefix_t pfx;
+  u32 fib_flags, fib_index;
+  int ii;
+
+  /* check again if we need this client */
+  pc = pbl_client_get_if_exists (args->pci);
+  if (NULL == pc)
+    {
+      pool_get_aligned (pbl_client_pool, pc, CLIB_CACHE_LINE_BYTES);
+      pc->pc_locks = 1;
+      args->pci = pc - pbl_client_pool;
+      pc->pc_index = pc - pbl_client_pool;
+      pc->flags = args->flags;
+      pc->clone_pci = INDEX_INVALID;
+      for (ii = 0; ii < PBL_CLIENT_PORT_MAP_N_PROTOS; ii++)
+	pc->pc_port_maps[ii] = args->port_maps[ii];
+      fib_node_init (&pc->pc_node, pbl_client_fib_node_type);
+
+      ip_address_copy (&pc->pc_addr, &args->addr);
+
+      ip_address_to_fib_prefix (&pc->pc_addr, &pfx);
+
+      dproto = fib_proto_to_dpo (pfx.fp_proto);
+      dpo_set (&tmp, pbl_client_dpo, dproto, args->pci);
+      dpo_stack (pbl_client_dpo, dproto, &pc->pc_parent,
+		 drop_dpo_get (dproto));
+
+      fib_flags = FIB_ENTRY_FLAG_LOOSE_URPF_EXEMPT;
+      fib_flags |= (args->flags & PBL_FLAG_EXCLUSIVE) ?
+		     FIB_ENTRY_FLAG_EXCLUSIVE :
+		     FIB_ENTRY_FLAG_INTERPOSE;
+
+      fib_index = fib_table_find (pfx.fp_proto, args->table_id);
+      fei = fib_table_entry_special_dpo_add (fib_index, &pfx, pbl_fib_source,
+					     fib_flags, &tmp);
+
+      /* in case of interpose, pool can grow */
+      pc = pool_elt_at_index (pbl_client_pool, args->pci);
+
+      pc->pc_fei = fei;
+
+      pc->flags = args->flags;
+      pc->flags &= ~PBL_CLIENT_STACKED;
+
+      /* Contribute in fib in fib */
+      pc->pc_pl = fib_path_list_create (
+	FIB_PATH_LIST_FLAG_SHARED | FIB_PATH_LIST_FLAG_NO_URPF, args->rpaths);
+
+      /*
+       * become a child of the path list so we get poked when
+       * the forwarding changes.
+       */
+      pc->pc_sibling = fib_path_list_child_add (
+	pc->pc_pl, pbl_client_fib_node_type, pc->pc_index);
+      pbl_client_stack (pc);
+    }
+  else
+    {
+      /* Update unimplemented */
+      clib_warning ("unimplemented");
+    }
+
+  return (pc->pc_index);
+}
+
+void
+pbl_client_walk (pbl_client_walk_cb_t cb, void *ctx)
+{
+  u32 api;
+
+  pool_foreach_index (api, pbl_client_pool)
+    {
+      if (!cb (api, ctx))
+	break;
+    }
+}
+
+int
+pbl_client_purge (void)
+{
+  /* purge all the clients */
+  index_t tri, *trp, *trs = NULL;
+
+  pool_foreach_index (tri, pbl_client_pool)
+    {
+      vec_add1 (trs, tri);
+    }
+
+  vec_foreach (trp, trs)
+    pbl_client_delete (*trp);
+
+  ASSERT (0 == pool_elts (pbl_client_pool));
+
+  vec_free (trs);
+
+  return (0);
+}
+
+static fib_node_t *
+pbl_client_get_node (fib_node_index_t index)
+{
+  pbl_client_t *pc = pbl_client_get (index);
+  return (&(pc->pc_node));
+}
+
+static pbl_client_t *
+pbl_client_get_from_node (fib_node_t *node)
+{
+  return ((pbl_client_t *) (((char *) node) -
+			    STRUCT_OFFSET_OF (pbl_client_t, pc_node)));
+}
+
+static void
+pbl_client_last_lock_gone (fib_node_t *node)
+{
+ /**/}
+
+ /*
+  * A back walk has reached this ABF policy
+  */
+ static fib_node_back_walk_rc_t
+ pbl_client_back_walk_notify (fib_node_t *node, fib_node_back_walk_ctx_t *ctx)
+ {
+   /*
+    * re-stack the fmask on the n-eos of the via
+    */
+   pbl_client_t *pc = pbl_client_get_from_node (node);
+
+   /* If we have more than FIB_PATH_LIST_POPULAR paths
+    * we might get called during path tracking */
+   if (!(pc->flags & PBL_CLIENT_STACKED))
+     return (FIB_NODE_BACK_WALK_CONTINUE);
+
+   pbl_client_stack (pc);
+
+   return (FIB_NODE_BACK_WALK_CONTINUE);
+ }
+
+ /*
+  * The client's graph node virtual function table
+  */
+ static const fib_node_vft_t pbl_client_vft = {
+   .fnv_get = pbl_client_get_node,
+   .fnv_last_lock = pbl_client_last_lock_gone,
+   .fnv_back_walk = pbl_client_back_walk_notify,
+ };
+
+ static clib_error_t *
+ pbl_client_cli_add_del (vlib_main_t *vm, unformat_input_t *input,
+			 vlib_cli_command_t *cmd)
+ {
+   pbl_client_update_args_t _args = { 0 }, *args = &_args;
+   unformat_input_t _line_input, *line_input = &_line_input;
+   dpo_proto_t payload_proto;
+   fib_route_path_t rpath;
+   clib_error_t *e = 0;
+   u32 port_a, port_b;
+   int is_add = 1, ii;
+   u32 iproto, proto;
+
+   args->pci = INDEX_INVALID;
+   for (ii = 0; ii < PBL_CLIENT_PORT_MAP_N_PROTOS; ii++)
+     {
+       clib_bitmap_alloc (args->port_maps[ii], (1 << 16) - 1);
+       clib_bitmap_zero (args->port_maps[ii]);
+     }
+
+   /* Get a line of input. */
+   if (!unformat_user (input, unformat_line_input, line_input))
+     return 0;
+
+   while (unformat_check_input (line_input) != UNFORMAT_END_OF_INPUT)
+     {
+       if (unformat (line_input, "addr %U", unformat_ip_address, &args->addr))
+	 ;
+       else if (unformat (line_input, "add"))
+	 is_add = 1;
+       else if (unformat (line_input, "del"))
+	 is_add = 0;
+       else if (unformat (line_input, "id %d", &args->pci))
+	 ;
+       else if (unformat (line_input, "table %d", &args->table_id))
+	 ;
+       else if (unformat (line_input, "exclusive"))
+	 args->flags = PBL_FLAG_EXCLUSIVE;
+       else if (unformat (line_input, "via %U", unformat_fib_route_path,
+			  &rpath, &payload_proto))
+	 vec_add1 (args->rpaths, rpath);
+       else if (unformat (line_input, "%U %u-%u", unformat_ip_protocol,
+			  &iproto, &port_a, &port_b))
+	 {
+	   proto = pbl_iproto_to_port_map_proto (iproto);
+	   port_b = clib_max (port_a, port_b);
+	   if (proto < PBL_CLIENT_PORT_MAP_N_PROTOS)
+	     clib_bitmap_set_region (args->port_maps[proto], (u16) port_a, 1,
+				     (u16) (port_b - port_a + 1));
+	 }
+       else if (unformat (line_input, "%U %u", unformat_ip_protocol, &iproto,
+			  &port_a))
+	 {
+	   proto = pbl_iproto_to_port_map_proto (iproto);
+	   if (proto < PBL_CLIENT_PORT_MAP_N_PROTOS)
+	     clib_bitmap_set (args->port_maps[proto], (u16) port_a, 1);
+	 }
+       else
+	 {
+	   e = clib_error_return (0, "unknown input '%U'",
+				  format_unformat_error, line_input);
+	   goto done;
+	 }
+     }
+
+   if (is_add)
+     pbl_client_update (args);
+   else
+     pbl_client_delete (args->pci);
+
+ done:
+   vec_free (args->rpaths);
+   unformat_free (line_input);
+   return (e);
+ }
+
+ VLIB_CLI_COMMAND (pbl_client_cli_add_del_command, static) = {
+   .path = "pbl client",
+   .short_help = "pbl client [add|del] [addr <address>] [via <path>]"
+		 "[[id <id>] [table <table-id>] [exclusive]]",
+   .function = pbl_client_cli_add_del,
+ };
+
+ static clib_error_t *
+ pbl_client_init (vlib_main_t *vm)
+ {
+   pbl_client_dpo =
+     dpo_register_new_type (&pbl_client_dpo_vft, pbl_client_dpo_nodes);
+
+   pbl_fib_source = fib_source_allocate ("pbl", PBL_FIB_SOURCE_PRIORITY,
+					 FIB_SOURCE_BH_SIMPLE);
+
+   pbl_client_fib_node_type =
+     fib_node_register_new_type ("pbl-client", &pbl_client_vft);
+
+   return (NULL);
+ }
+
+ VLIB_INIT_FUNCTION (pbl_client_init);
+
+ VLIB_PLUGIN_REGISTER () = {
+   .version = VPP_BUILD_VER,
+   .description = "Port based balancer (PBL)",
+   .default_disabled = 0,
+ };
+
+ /*
+  * fd.io coding-style-patch-verification: ON
+  *
+  * Local Variables:
+  * eval: (c-set-style "gnu")
+  * End:
+  */
diff --git a/src/plugins/pbl/pbl_client.h b/src/plugins/pbl/pbl_client.h
new file mode 100644
index 000000000..431bdc53b
--- /dev/null
+++ b/src/plugins/pbl/pbl_client.h
@@ -0,0 +1,191 @@
+/*
+ * Copyright (c) 2020 Cisco and/or its affiliates.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef __PBL_CLIENT_H__
+#define __PBL_CLIENT_H__
+
+#include <vnet/ip/ip_types.h>
+#include <vnet/fib/fib_node.h>
+
+/* This should be strictly lower than FIB_SOURCE_INTERFACE
+ * from fib_source.h */
+#define PBL_FIB_SOURCE_PRIORITY FIB_SOURCE_SPECIAL
+
+typedef enum pbl_client_port_map_proto_t_
+{
+  PBL_CLIENT_PORT_MAP_TCP,
+  PBL_CLIENT_PORT_MAP_UDP,
+  PBL_CLIENT_PORT_MAP_N_PROTOS,
+  PBL_CLIENT_PORT_MAP_UNKNOWN = 255,
+} pbl_client_port_map_proto_t;
+
+/**
+ * A Translation represents the client of a VEP to one of a set
+ * of real server addresses
+ */
+typedef struct pbl_client_t_
+{
+  CLIB_CACHE_LINE_ALIGN_MARK (cacheline0);
+
+  /* Linkage into the FIB graph */
+  fib_node_t pc_node;
+
+  /**
+   * FIB hook for intercepting traffic
+   */
+
+  /* The address we intercept traffic to */
+  ip_address_t pc_addr;
+
+  /* How to send packets to this client post client */
+  dpo_id_t pc_parent;
+
+  /* the FIB entry this client sources */
+  fib_node_index_t pc_fei;
+
+  /* number of DPO locks */
+  u32 pc_locks;
+
+  /**
+   * Parent pbl_client index if cloned via interpose
+   * or own index if vanilla client.
+   * Used to get clients & update session_refcnt
+   */
+  index_t clone_pci;
+
+  /* Matched ports that will forward to pc_dpo */
+  clib_bitmap_t *pc_port_maps[PBL_CLIENT_PORT_MAP_N_PROTOS];
+
+  /**
+   * Forwarding
+   */
+
+  /* Sibling index on the path-list */
+  u32 pc_sibling;
+
+  /* The DPO actually used for forwarding */
+  dpo_id_t pc_dpo;
+
+  /* The path-list describing how to forward in case of a match */
+  fib_node_index_t pc_pl;
+
+  /* Own index (if copied for trace) */
+  index_t pc_index;
+
+  /* Client flags */
+  u8 flags;
+
+} pbl_client_t;
+
+typedef enum pbl_client_flag_t_
+{
+  /* Has this translation been satcked ?
+   * this allow not being called twice when
+   * with more then FIB_PATH_LIST_POPULAR backends  */
+  PBL_CLIENT_STACKED = (1 << 0),
+} pbl_client_flag_t;
+
+typedef struct pbl_client_update_args_t_
+{
+  index_t pci;
+  ip_address_t addr;
+  clib_bitmap_t *port_maps[PBL_CLIENT_PORT_MAP_N_PROTOS];
+  fib_route_path_t *rpaths;
+  u32 table_id;
+  u8 flags;
+} pbl_client_update_args_t;
+
+extern pbl_client_t *pbl_client_pool;
+
+/**
+ * create or update a client
+ *
+ * @param vip The Virtual Endpoint
+ * @param ip_proto The ip protocol to translate
+ * @param backends the backends to choose from
+ *
+ * @return the ID of the client. used to delete and gather stats
+ */
+extern u32 pbl_client_update (pbl_client_update_args_t *args);
+
+/**
+ * Delete a client
+ *
+ * @param id the ID as returned from the create
+ */
+extern int pbl_client_delete (u32 id);
+
+/**
+ * Callback function invoked during a walk of all clients
+ */
+typedef walk_rc_t (*pbl_client_walk_cb_t) (index_t index, void *ctx);
+
+/**
+ * Walk/visit each of the clients
+ */
+extern void pbl_client_walk (pbl_client_walk_cb_t cb, void *ctx);
+
+/**
+ * Purge all the trahslations
+ */
+extern int pbl_client_purge (void);
+
+static_always_inline pbl_client_port_map_proto_t
+pbl_iproto_to_port_map_proto (ip_protocol_t iproto)
+{
+  switch (iproto)
+    {
+    case IP_PROTOCOL_TCP:
+      return PBL_CLIENT_PORT_MAP_TCP;
+    case IP_PROTOCOL_UDP:
+      return PBL_CLIENT_PORT_MAP_UDP;
+    default:
+      return PBL_CLIENT_PORT_MAP_UNKNOWN;
+    }
+}
+
+/*
+ * Data plane functions
+ */
+
+static_always_inline pbl_client_t *
+pbl_client_get (index_t cti)
+{
+  return (pool_elt_at_index (pbl_client_pool, cti));
+}
+
+static_always_inline pbl_client_t *
+pbl_client_get_if_exists (index_t cti)
+{
+  if (pool_is_free_index (pbl_client_pool, cti))
+    return (NULL);
+  return (pool_elt_at_index (pbl_client_pool, cti));
+}
+
+typedef enum
+{
+  /* IP already present in the FIB, need to interpose dpo */
+  PBL_FLAG_EXCLUSIVE = (1 << 1),
+} pbl_entry_flag_t;
+
+/*
+ * fd.io coding-style-patch-verification: ON
+ *
+ * Local Variables:
+ * eval: (c-set-style "gnu")
+ * End:
+ */
+
+#endif
diff --git a/src/plugins/pbl/pbl_error.def b/src/plugins/pbl/pbl_error.def
new file mode 100644
index 000000000..b135bf03c
--- /dev/null
+++ b/src/plugins/pbl/pbl_error.def
@@ -0,0 +1,16 @@
+/*
+ * Copyright (c) 2021 Cisco and/or its affiliates.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+pbl_error (NONE, "no error")
\ No newline at end of file
diff --git a/src/plugins/pbl/pbl_node.c b/src/plugins/pbl/pbl_node.c
new file mode 100644
index 000000000..478584019
--- /dev/null
+++ b/src/plugins/pbl/pbl_node.c
@@ -0,0 +1,183 @@
+/*
+ * Copyright (c) 2020 Cisco and/or its affiliates.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <vlibmemory/api.h>
+#include <vnet/dpo/load_balance.h>
+#include <vnet/dpo/load_balance_map.h>
+
+#include <cnat/cnat_session.h>
+#include <cnat/cnat_client.h>
+#include <cnat/cnat_inline.h>
+#include <cnat/cnat_translation.h>
+
+#include <vnet/ip/ip4_inlines.h>
+#include <vnet/ip/ip6_inlines.h>
+
+#include <pbl/pbl_client.h>
+
+typedef enum pbl_translation_next_t_
+{
+  PBL_NEXT_DROP,
+  PBL_NEXT_LOOKUP,
+  PBL_TRANSLATION_N_NEXT,
+} pbl_translation_next_t;
+
+vlib_node_registration_t pbl_vip_ip4_node;
+vlib_node_registration_t pbl_vip_ip6_node;
+
+typedef struct
+{
+  u8 matched;
+} pbl_trace_t;
+
+static u8 *
+format_pbl_trace (u8 *s, va_list *args)
+{
+  vlib_main_t *__clib_unused vm = va_arg (*args, vlib_main_t *);
+  vlib_node_t *__clib_unused node = va_arg (*args, vlib_node_t *);
+  pbl_trace_t *t = va_arg (*args, pbl_trace_t *);
+  if (t->matched)
+    s = format (s, "matched PBL client");
+  else
+    s = format (s, "no match");
+  return s;
+}
+
+/* CNat sub for NAT behind a fib entry (VIP or interposed real IP) */
+static uword
+pbl_node_inline (vlib_main_t *vm, vlib_node_runtime_t *node,
+		 vlib_frame_t *frame, ip_address_family_t af, u8 do_trace)
+{
+
+  u32 n_left, *from;
+  vlib_buffer_t *bufs[VLIB_FRAME_SIZE];
+  vlib_buffer_t **b = bufs;
+  u16 nexts[VLIB_FRAME_SIZE], *next;
+  pbl_trace_t *t;
+  int matched = 0;
+
+  from = vlib_frame_vector_args (frame);
+  n_left = frame->n_vectors;
+  next = nexts;
+  vlib_get_buffers (vm, from, bufs, n_left);
+
+  while (n_left > 0)
+    {
+      ip4_header_t *ip4 = NULL;
+      ip6_header_t *ip6 = NULL;
+      pbl_client_port_map_proto_t proto;
+      udp_header_t *udp0;
+      pbl_client_t *pc;
+
+      if (AF_IP4 == af)
+	{
+	  ip4 = vlib_buffer_get_current (b[0]);
+	  proto = pbl_iproto_to_port_map_proto (ip4->protocol);
+	  udp0 = (udp_header_t *) (ip4 + 1);
+	}
+      else
+	{
+	  ip6 = vlib_buffer_get_current (b[0]);
+	  proto = pbl_iproto_to_port_map_proto (ip6->protocol);
+	  udp0 = (udp_header_t *) (ip6 + 1);
+	}
+
+      pc = pbl_client_get (vnet_buffer (b[0])->ip.adj_index[VLIB_TX]);
+      if (proto < PBL_CLIENT_PORT_MAP_N_PROTOS &&
+	  clib_bitmap_get (pc->pc_port_maps[proto],
+			   clib_net_to_host_u16 (udp0->dst_port)))
+	{
+	  /* matched */
+	  next[0] = pc->pc_dpo.dpoi_next_node;
+	  vnet_buffer (b[0])->ip.adj_index[VLIB_TX] = pc->pc_dpo.dpoi_index;
+	  matched = 1;
+	  goto trace;
+	}
+
+      /* Dont translate & Follow the fib programming */
+      matched = 0;
+      vnet_buffer (b[0])->ip.adj_index[VLIB_TX] = pc->pc_parent.dpoi_index;
+      next[0] = pc->pc_parent.dpoi_next_node;
+
+    trace:
+
+      if (do_trace)
+	{
+	  t = vlib_add_trace (vm, node, b[0], sizeof (*t));
+	  t->matched = matched;
+	}
+
+      b++;
+      next++;
+      n_left--;
+    }
+
+  vlib_buffer_enqueue_to_next (vm, node, from, nexts, frame->n_vectors);
+
+  return frame->n_vectors;
+}
+
+VLIB_NODE_FN (pbl_vip_ip4_node)
+(vlib_main_t *vm, vlib_node_runtime_t *node, vlib_frame_t *frame)
+{
+  if (PREDICT_FALSE ((node->flags & VLIB_NODE_FLAG_TRACE)))
+    return pbl_node_inline (vm, node, frame, AF_IP4, 1 /* do_trace */);
+  return pbl_node_inline (vm, node, frame, AF_IP4, 0 /* do_trace */);
+}
+
+VLIB_NODE_FN (pbl_vip_ip6_node)
+(vlib_main_t *vm, vlib_node_runtime_t *node, vlib_frame_t *frame)
+{
+  if (PREDICT_FALSE ((node->flags & VLIB_NODE_FLAG_TRACE)))
+    return pbl_node_inline (vm, node, frame, AF_IP6, 1 /* do_trace */);
+  return pbl_node_inline (vm, node, frame, AF_IP6, 0 /* do_trace */);
+}
+
+VLIB_REGISTER_NODE (pbl_vip_ip4_node) =
+{
+  .name = "ip4-pbl-tx",
+  .vector_size = sizeof (u32),
+  .format_trace = format_pbl_trace,
+  .type = VLIB_NODE_TYPE_INTERNAL,
+  .n_errors = 0,
+  .n_next_nodes = PBL_TRANSLATION_N_NEXT,
+  .next_nodes =
+  {
+    [PBL_NEXT_DROP] = "ip4-drop",
+    [PBL_NEXT_LOOKUP] = "ip4-lookup",
+  },
+};
+VLIB_REGISTER_NODE (pbl_vip_ip6_node) =
+{
+  .name = "ip6-pbl-tx",
+  .vector_size = sizeof (u32),
+  .format_trace = format_pbl_trace,
+  .type = VLIB_NODE_TYPE_INTERNAL,
+  .n_errors = 0,
+  .n_next_nodes = PBL_TRANSLATION_N_NEXT,
+  .next_nodes =
+  {
+    [PBL_NEXT_DROP] = "ip6-drop",
+    [PBL_NEXT_LOOKUP] = "ip6-lookup",
+  },
+};
+
+/*
+ * fd.io coding-style-patch-verification: ON
+ *
+ * Local Variables:
+ * eval: (c-set-style "gnu")
+ * End:
+ */
-- 
2.39.2

