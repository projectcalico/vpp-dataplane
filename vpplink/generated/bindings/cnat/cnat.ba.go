// Code generated by GoVPP's binapi-generator. DO NOT EDIT.

// Package cnat contains generated bindings for API file cnat.api.
//
// Contents:
// -  5 enums
// -  5 structs
// - 26 messages
package cnat

import (
	"strconv"

	_ "github.com/projectcalico/vpp-dataplane/v3/vpplink/generated/bindings/ethernet_types"
	_ "github.com/projectcalico/vpp-dataplane/v3/vpplink/generated/bindings/fib_types"
	interface_types "github.com/projectcalico/vpp-dataplane/v3/vpplink/generated/bindings/interface_types"
	ip "github.com/projectcalico/vpp-dataplane/v3/vpplink/generated/bindings/ip"
	ip_types "github.com/projectcalico/vpp-dataplane/v3/vpplink/generated/bindings/ip_types"
	_ "github.com/projectcalico/vpp-dataplane/v3/vpplink/generated/bindings/mfib_types"
	api "go.fd.io/govpp/api"
	codec "go.fd.io/govpp/codec"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "cnat"
	APIVersion = "0.3.0"
	VersionCrc = 0x575ccfbb
)

// CnatEndpointTupleFlags defines enum 'cnat_endpoint_tuple_flags'.
type CnatEndpointTupleFlags uint8

const (
	CNAT_EPT_NO_NAT CnatEndpointTupleFlags = 2
)

var (
	CnatEndpointTupleFlags_name = map[uint8]string{
		2: "CNAT_EPT_NO_NAT",
	}
	CnatEndpointTupleFlags_value = map[string]uint8{
		"CNAT_EPT_NO_NAT": 2,
	}
)

func (x CnatEndpointTupleFlags) String() string {
	s, ok := CnatEndpointTupleFlags_name[uint8(x)]
	if ok {
		return s
	}
	str := func(n uint8) string {
		s, ok := CnatEndpointTupleFlags_name[uint8(n)]
		if ok {
			return s
		}
		return "CnatEndpointTupleFlags(" + strconv.Itoa(int(n)) + ")"
	}
	for i := uint8(0); i <= 8; i++ {
		val := uint8(x)
		if val&(1<<i) != 0 {
			if s != "" {
				s += "|"
			}
			s += str(1 << i)
		}
	}
	if s == "" {
		return str(uint8(x))
	}
	return s
}

// CnatLbType defines enum 'cnat_lb_type'.
type CnatLbType uint8

const (
	CNAT_LB_TYPE_DEFAULT CnatLbType = 0
	CNAT_LB_TYPE_MAGLEV  CnatLbType = 1
)

var (
	CnatLbType_name = map[uint8]string{
		0: "CNAT_LB_TYPE_DEFAULT",
		1: "CNAT_LB_TYPE_MAGLEV",
	}
	CnatLbType_value = map[string]uint8{
		"CNAT_LB_TYPE_DEFAULT": 0,
		"CNAT_LB_TYPE_MAGLEV":  1,
	}
)

func (x CnatLbType) String() string {
	s, ok := CnatLbType_name[uint8(x)]
	if ok {
		return s
	}
	return "CnatLbType(" + strconv.Itoa(int(x)) + ")"
}

// CnatSnatPolicies defines enum 'cnat_snat_policies'.
type CnatSnatPolicies uint8

const (
	CNAT_POLICY_NONE   CnatSnatPolicies = 0
	CNAT_POLICY_IF_PFX CnatSnatPolicies = 1
	CNAT_POLICY_K8S    CnatSnatPolicies = 2
)

var (
	CnatSnatPolicies_name = map[uint8]string{
		0: "CNAT_POLICY_NONE",
		1: "CNAT_POLICY_IF_PFX",
		2: "CNAT_POLICY_K8S",
	}
	CnatSnatPolicies_value = map[string]uint8{
		"CNAT_POLICY_NONE":   0,
		"CNAT_POLICY_IF_PFX": 1,
		"CNAT_POLICY_K8S":    2,
	}
)

func (x CnatSnatPolicies) String() string {
	s, ok := CnatSnatPolicies_name[uint8(x)]
	if ok {
		return s
	}
	return "CnatSnatPolicies(" + strconv.Itoa(int(x)) + ")"
}

// CnatSnatPolicyTable defines enum 'cnat_snat_policy_table'.
type CnatSnatPolicyTable uint8

const (
	CNAT_POLICY_INCLUDE_V4 CnatSnatPolicyTable = 0
	CNAT_POLICY_INCLUDE_V6 CnatSnatPolicyTable = 1
	CNAT_POLICY_POD        CnatSnatPolicyTable = 2
	CNAT_POLICY_HOST       CnatSnatPolicyTable = 3
)

var (
	CnatSnatPolicyTable_name = map[uint8]string{
		0: "CNAT_POLICY_INCLUDE_V4",
		1: "CNAT_POLICY_INCLUDE_V6",
		2: "CNAT_POLICY_POD",
		3: "CNAT_POLICY_HOST",
	}
	CnatSnatPolicyTable_value = map[string]uint8{
		"CNAT_POLICY_INCLUDE_V4": 0,
		"CNAT_POLICY_INCLUDE_V6": 1,
		"CNAT_POLICY_POD":        2,
		"CNAT_POLICY_HOST":       3,
	}
)

func (x CnatSnatPolicyTable) String() string {
	s, ok := CnatSnatPolicyTable_name[uint8(x)]
	if ok {
		return s
	}
	return "CnatSnatPolicyTable(" + strconv.Itoa(int(x)) + ")"
}

// CnatTranslationFlags defines enum 'cnat_translation_flags'.
type CnatTranslationFlags uint8

const (
	CNAT_TRANSLATION_ALLOC_PORT        CnatTranslationFlags = 1
	CNAT_TRANSLATION_NO_RETURN_SESSION CnatTranslationFlags = 4
	CNAT_TRANSLATION_NO_CLIENT         CnatTranslationFlags = 8
)

var (
	CnatTranslationFlags_name = map[uint8]string{
		1: "CNAT_TRANSLATION_ALLOC_PORT",
		4: "CNAT_TRANSLATION_NO_RETURN_SESSION",
		8: "CNAT_TRANSLATION_NO_CLIENT",
	}
	CnatTranslationFlags_value = map[string]uint8{
		"CNAT_TRANSLATION_ALLOC_PORT":        1,
		"CNAT_TRANSLATION_NO_RETURN_SESSION": 4,
		"CNAT_TRANSLATION_NO_CLIENT":         8,
	}
)

func (x CnatTranslationFlags) String() string {
	s, ok := CnatTranslationFlags_name[uint8(x)]
	if ok {
		return s
	}
	str := func(n uint8) string {
		s, ok := CnatTranslationFlags_name[uint8(n)]
		if ok {
			return s
		}
		return "CnatTranslationFlags(" + strconv.Itoa(int(n)) + ")"
	}
	for i := uint8(0); i <= 8; i++ {
		val := uint8(x)
		if val&(1<<i) != 0 {
			if s != "" {
				s += "|"
			}
			s += str(1 << i)
		}
	}
	if s == "" {
		return str(uint8(x))
	}
	return s
}

// Cnat5tuple defines type 'cnat_5tuple'.
type Cnat5tuple struct {
	Addr    [2]ip_types.Address `binapi:"address[2],name=addr" json:"addr,omitempty"`
	Port    []uint16            `binapi:"u16[2],name=port" json:"port,omitempty"`
	IPProto ip_types.IPProto    `binapi:"ip_proto,name=ip_proto" json:"ip_proto,omitempty"`
}

// CnatEndpoint defines type 'cnat_endpoint'.
type CnatEndpoint struct {
	Addr      ip_types.Address               `binapi:"address,name=addr" json:"addr,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	IfAf      ip_types.AddressFamily         `binapi:"address_family,name=if_af" json:"if_af,omitempty"`
	Port      uint16                         `binapi:"u16,name=port" json:"port,omitempty"`
}

// CnatEndpointTuple defines type 'cnat_endpoint_tuple'.
type CnatEndpointTuple struct {
	DstEp CnatEndpoint `binapi:"cnat_endpoint,name=dst_ep" json:"dst_ep,omitempty"`
	SrcEp CnatEndpoint `binapi:"cnat_endpoint,name=src_ep" json:"src_ep,omitempty"`
	Flags uint8        `binapi:"u8,name=flags" json:"flags,omitempty"`
}

// CnatSession defines type 'cnat_session'.
type CnatSession struct {
	Tuple   Cnat5tuple `binapi:"cnat_5tuple,name=tuple" json:"tuple,omitempty"`
	TsIndex uint32     `binapi:"u32,name=ts_index" json:"ts_index,omitempty"`
	Flags   uint32     `binapi:"u32,name=flags" json:"flags,omitempty"`
}

// CnatTranslation defines type 'cnat_translation'.
type CnatTranslation struct {
	Vip            CnatEndpoint          `binapi:"cnat_endpoint,name=vip" json:"vip,omitempty"`
	ID             uint32                `binapi:"u32,name=id" json:"id,omitempty"`
	IPProto        ip_types.IPProto      `binapi:"ip_proto,name=ip_proto" json:"ip_proto,omitempty"`
	IsRealIP       uint8                 `binapi:"u8,name=is_real_ip" json:"is_real_ip,omitempty"`
	Flags          uint8                 `binapi:"u8,name=flags" json:"flags,omitempty"`
	LbType         CnatLbType            `binapi:"cnat_lb_type,name=lb_type" json:"lb_type,omitempty"`
	NPaths         uint32                `binapi:"u32,name=n_paths" json:"-"`
	FlowHashConfig ip.IPFlowHashConfigV2 `binapi:"ip_flow_hash_config_v2,name=flow_hash_config" json:"flow_hash_config,omitempty"`
	Paths          []CnatEndpointTuple   `binapi:"cnat_endpoint_tuple[n_paths],name=paths" json:"paths,omitempty"`
}

// Duplicate the cnat snat policy of the default vrf into another vrf
//   - table_id_ip4 -
//
// ApplyDefaultCnatSnat defines message 'apply_default_cnat_snat'.
type ApplyDefaultCnatSnat struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *ApplyDefaultCnatSnat) Reset()               { *m = ApplyDefaultCnatSnat{} }
func (*ApplyDefaultCnatSnat) GetMessageName() string { return "apply_default_cnat_snat" }
func (*ApplyDefaultCnatSnat) GetCrcString() string   { return "f9e6675e" }
func (*ApplyDefaultCnatSnat) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *ApplyDefaultCnatSnat) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndex
	return size
}
func (m *ApplyDefaultCnatSnat) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *ApplyDefaultCnatSnat) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// ApplyDefaultCnatSnatReply defines message 'apply_default_cnat_snat_reply'.
type ApplyDefaultCnatSnatReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *ApplyDefaultCnatSnatReply) Reset()               { *m = ApplyDefaultCnatSnatReply{} }
func (*ApplyDefaultCnatSnatReply) GetMessageName() string { return "apply_default_cnat_snat_reply" }
func (*ApplyDefaultCnatSnatReply) GetCrcString() string   { return "e8d4e804" }
func (*ApplyDefaultCnatSnatReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *ApplyDefaultCnatSnatReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *ApplyDefaultCnatSnatReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *ApplyDefaultCnatSnatReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// CnatGetSnatAddresses defines message 'cnat_get_snat_addresses'.
type CnatGetSnatAddresses struct{}

func (m *CnatGetSnatAddresses) Reset()               { *m = CnatGetSnatAddresses{} }
func (*CnatGetSnatAddresses) GetMessageName() string { return "cnat_get_snat_addresses" }
func (*CnatGetSnatAddresses) GetCrcString() string   { return "51077d14" }
func (*CnatGetSnatAddresses) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CnatGetSnatAddresses) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *CnatGetSnatAddresses) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *CnatGetSnatAddresses) Unmarshal(b []byte) error {
	return nil
}

// CnatGetSnatAddressesReply defines message 'cnat_get_snat_addresses_reply'.
type CnatGetSnatAddressesReply struct {
	Retval    int32                          `binapi:"i32,name=retval" json:"retval,omitempty"`
	ID        uint32                         `binapi:"u32,name=id" json:"id,omitempty"`
	SnatIP4   ip_types.IP4Address            `binapi:"ip4_address,name=snat_ip4" json:"snat_ip4,omitempty"`
	SnatIP6   ip_types.IP6Address            `binapi:"ip6_address,name=snat_ip6" json:"snat_ip6,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *CnatGetSnatAddressesReply) Reset()               { *m = CnatGetSnatAddressesReply{} }
func (*CnatGetSnatAddressesReply) GetMessageName() string { return "cnat_get_snat_addresses_reply" }
func (*CnatGetSnatAddressesReply) GetCrcString() string   { return "879513c1" }
func (*CnatGetSnatAddressesReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CnatGetSnatAddressesReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.Retval
	size += 4      // m.ID
	size += 1 * 4  // m.SnatIP4
	size += 1 * 16 // m.SnatIP6
	size += 4      // m.SwIfIndex
	return size
}
func (m *CnatGetSnatAddressesReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.ID)
	buf.EncodeBytes(m.SnatIP4[:], 4)
	buf.EncodeBytes(m.SnatIP6[:], 16)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *CnatGetSnatAddressesReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.ID = buf.DecodeUint32()
	copy(m.SnatIP4[:], buf.DecodeBytes(4))
	copy(m.SnatIP6[:], buf.DecodeBytes(16))
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// CnatSessionDetails defines message 'cnat_session_details'.
type CnatSessionDetails struct {
	Session CnatSession `binapi:"cnat_session,name=session" json:"session,omitempty"`
}

func (m *CnatSessionDetails) Reset()               { *m = CnatSessionDetails{} }
func (*CnatSessionDetails) GetMessageName() string { return "cnat_session_details" }
func (*CnatSessionDetails) GetCrcString() string   { return "7a78bf3f" }
func (*CnatSessionDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CnatSessionDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	for j3 := 0; j3 < 2; j3++ {
		size += 1      // m.Session.Tuple.Addr[j3].Af
		size += 1 * 16 // m.Session.Tuple.Addr[j3].Un
	}
	size += 2 * 2 // m.Session.Tuple.Port
	size += 1     // m.Session.Tuple.IPProto
	size += 4     // m.Session.TsIndex
	size += 4     // m.Session.Flags
	return size
}
func (m *CnatSessionDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	for j2 := 0; j2 < 2; j2++ {
		buf.EncodeUint8(uint8(m.Session.Tuple.Addr[j2].Af))
		buf.EncodeBytes(m.Session.Tuple.Addr[j2].Un.XXX_UnionData[:], 16)
	}
	for i := 0; i < 2; i++ {
		var x uint16
		if i < len(m.Session.Tuple.Port) {
			x = uint16(m.Session.Tuple.Port[i])
		}
		buf.EncodeUint16(x)
	}
	buf.EncodeUint8(uint8(m.Session.Tuple.IPProto))
	buf.EncodeUint32(m.Session.TsIndex)
	buf.EncodeUint32(m.Session.Flags)
	return buf.Bytes(), nil
}
func (m *CnatSessionDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	for j2 := 0; j2 < 2; j2++ {
		m.Session.Tuple.Addr[j2].Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.Session.Tuple.Addr[j2].Un.XXX_UnionData[:], buf.DecodeBytes(16))
	}
	m.Session.Tuple.Port = make([]uint16, 2)
	for i := 0; i < len(m.Session.Tuple.Port); i++ {
		m.Session.Tuple.Port[i] = buf.DecodeUint16()
	}
	m.Session.Tuple.IPProto = ip_types.IPProto(buf.DecodeUint8())
	m.Session.TsIndex = buf.DecodeUint32()
	m.Session.Flags = buf.DecodeUint32()
	return nil
}

// CnatSessionDump defines message 'cnat_session_dump'.
type CnatSessionDump struct{}

func (m *CnatSessionDump) Reset()               { *m = CnatSessionDump{} }
func (*CnatSessionDump) GetMessageName() string { return "cnat_session_dump" }
func (*CnatSessionDump) GetCrcString() string   { return "51077d14" }
func (*CnatSessionDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CnatSessionDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *CnatSessionDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *CnatSessionDump) Unmarshal(b []byte) error {
	return nil
}

// CnatSessionPurge defines message 'cnat_session_purge'.
type CnatSessionPurge struct{}

func (m *CnatSessionPurge) Reset()               { *m = CnatSessionPurge{} }
func (*CnatSessionPurge) GetMessageName() string { return "cnat_session_purge" }
func (*CnatSessionPurge) GetCrcString() string   { return "51077d14" }
func (*CnatSessionPurge) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CnatSessionPurge) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *CnatSessionPurge) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *CnatSessionPurge) Unmarshal(b []byte) error {
	return nil
}

// CnatSessionPurgeReply defines message 'cnat_session_purge_reply'.
type CnatSessionPurgeReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *CnatSessionPurgeReply) Reset()               { *m = CnatSessionPurgeReply{} }
func (*CnatSessionPurgeReply) GetMessageName() string { return "cnat_session_purge_reply" }
func (*CnatSessionPurgeReply) GetCrcString() string   { return "e8d4e804" }
func (*CnatSessionPurgeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CnatSessionPurgeReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *CnatSessionPurgeReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *CnatSessionPurgeReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// CnatSetSnatAddresses defines message 'cnat_set_snat_addresses'.
type CnatSetSnatAddresses struct {
	SnatIP4   ip_types.IP4Address            `binapi:"ip4_address,name=snat_ip4" json:"snat_ip4,omitempty"`
	SnatIP6   ip_types.IP6Address            `binapi:"ip6_address,name=snat_ip6" json:"snat_ip6,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	Flags     CnatTranslationFlags           `binapi:"cnat_translation_flags,name=flags" json:"flags,omitempty"`
}

func (m *CnatSetSnatAddresses) Reset()               { *m = CnatSetSnatAddresses{} }
func (*CnatSetSnatAddresses) GetMessageName() string { return "cnat_set_snat_addresses" }
func (*CnatSetSnatAddresses) GetCrcString() string   { return "e9472ed4" }
func (*CnatSetSnatAddresses) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CnatSetSnatAddresses) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4  // m.SnatIP4
	size += 1 * 16 // m.SnatIP6
	size += 4      // m.SwIfIndex
	size += 1      // m.Flags
	return size
}
func (m *CnatSetSnatAddresses) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.SnatIP4[:], 4)
	buf.EncodeBytes(m.SnatIP6[:], 16)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint8(uint8(m.Flags))
	return buf.Bytes(), nil
}
func (m *CnatSetSnatAddresses) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.SnatIP4[:], buf.DecodeBytes(4))
	copy(m.SnatIP6[:], buf.DecodeBytes(16))
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.Flags = CnatTranslationFlags(buf.DecodeUint8())
	return nil
}

// CnatSetSnatAddressesReply defines message 'cnat_set_snat_addresses_reply'.
type CnatSetSnatAddressesReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *CnatSetSnatAddressesReply) Reset()               { *m = CnatSetSnatAddressesReply{} }
func (*CnatSetSnatAddressesReply) GetMessageName() string { return "cnat_set_snat_addresses_reply" }
func (*CnatSetSnatAddressesReply) GetCrcString() string   { return "e8d4e804" }
func (*CnatSetSnatAddressesReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CnatSetSnatAddressesReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *CnatSetSnatAddressesReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *CnatSetSnatAddressesReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// /* A snat policy controls what traffic is srcNATed
// CnatSetSnatPolicy defines message 'cnat_set_snat_policy'.
type CnatSetSnatPolicy struct {
	Policy CnatSnatPolicies `binapi:"cnat_snat_policies,name=policy" json:"policy,omitempty"`
}

func (m *CnatSetSnatPolicy) Reset()               { *m = CnatSetSnatPolicy{} }
func (*CnatSetSnatPolicy) GetMessageName() string { return "cnat_set_snat_policy" }
func (*CnatSetSnatPolicy) GetCrcString() string   { return "d3e6eaf4" }
func (*CnatSetSnatPolicy) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CnatSetSnatPolicy) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.Policy
	return size
}
func (m *CnatSetSnatPolicy) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(uint8(m.Policy))
	return buf.Bytes(), nil
}
func (m *CnatSetSnatPolicy) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Policy = CnatSnatPolicies(buf.DecodeUint8())
	return nil
}

// CnatSetSnatPolicyReply defines message 'cnat_set_snat_policy_reply'.
type CnatSetSnatPolicyReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *CnatSetSnatPolicyReply) Reset()               { *m = CnatSetSnatPolicyReply{} }
func (*CnatSetSnatPolicyReply) GetMessageName() string { return "cnat_set_snat_policy_reply" }
func (*CnatSetSnatPolicyReply) GetCrcString() string   { return "e8d4e804" }
func (*CnatSetSnatPolicyReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CnatSetSnatPolicyReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *CnatSetSnatPolicyReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *CnatSetSnatPolicyReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// CnatSnatAddressesDetails defines message 'cnat_snat_addresses_details'.
type CnatSnatAddressesDetails struct {
	Retval      int32                          `binapi:"i32,name=retval" json:"retval,omitempty"`
	FwdTableID4 uint32                         `binapi:"u32,name=fwd_table_id4" json:"fwd_table_id4,omitempty"`
	FwdTableID6 uint32                         `binapi:"u32,name=fwd_table_id6" json:"fwd_table_id6,omitempty"`
	RetTableID4 uint32                         `binapi:"u32,name=ret_table_id4" json:"ret_table_id4,omitempty"`
	RetTableID6 uint32                         `binapi:"u32,name=ret_table_id6" json:"ret_table_id6,omitempty"`
	SnatIP4     ip_types.IP4Address            `binapi:"ip4_address,name=snat_ip4" json:"snat_ip4,omitempty"`
	SnatIP6     ip_types.IP6Address            `binapi:"ip6_address,name=snat_ip6" json:"snat_ip6,omitempty"`
	SwIfIndex   interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *CnatSnatAddressesDetails) Reset()               { *m = CnatSnatAddressesDetails{} }
func (*CnatSnatAddressesDetails) GetMessageName() string { return "cnat_snat_addresses_details" }
func (*CnatSnatAddressesDetails) GetCrcString() string   { return "09ae6b38" }
func (*CnatSnatAddressesDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CnatSnatAddressesDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.Retval
	size += 4      // m.FwdTableID4
	size += 4      // m.FwdTableID6
	size += 4      // m.RetTableID4
	size += 4      // m.RetTableID6
	size += 1 * 4  // m.SnatIP4
	size += 1 * 16 // m.SnatIP6
	size += 4      // m.SwIfIndex
	return size
}
func (m *CnatSnatAddressesDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.FwdTableID4)
	buf.EncodeUint32(m.FwdTableID6)
	buf.EncodeUint32(m.RetTableID4)
	buf.EncodeUint32(m.RetTableID6)
	buf.EncodeBytes(m.SnatIP4[:], 4)
	buf.EncodeBytes(m.SnatIP6[:], 16)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *CnatSnatAddressesDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.FwdTableID4 = buf.DecodeUint32()
	m.FwdTableID6 = buf.DecodeUint32()
	m.RetTableID4 = buf.DecodeUint32()
	m.RetTableID6 = buf.DecodeUint32()
	copy(m.SnatIP4[:], buf.DecodeBytes(4))
	copy(m.SnatIP6[:], buf.DecodeBytes(16))
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// CnatSnatAddressesDump defines message 'cnat_snat_addresses_dump'.
type CnatSnatAddressesDump struct{}

func (m *CnatSnatAddressesDump) Reset()               { *m = CnatSnatAddressesDump{} }
func (*CnatSnatAddressesDump) GetMessageName() string { return "cnat_snat_addresses_dump" }
func (*CnatSnatAddressesDump) GetCrcString() string   { return "51077d14" }
func (*CnatSnatAddressesDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CnatSnatAddressesDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *CnatSnatAddressesDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *CnatSnatAddressesDump) Unmarshal(b []byte) error {
	return nil
}

// CnatSnatPolicyAddDelExcludePfx defines message 'cnat_snat_policy_add_del_exclude_pfx'.
type CnatSnatPolicyAddDelExcludePfx struct {
	IsAdd  uint8           `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	Prefix ip_types.Prefix `binapi:"prefix,name=prefix" json:"prefix,omitempty"`
}

func (m *CnatSnatPolicyAddDelExcludePfx) Reset() { *m = CnatSnatPolicyAddDelExcludePfx{} }
func (*CnatSnatPolicyAddDelExcludePfx) GetMessageName() string {
	return "cnat_snat_policy_add_del_exclude_pfx"
}
func (*CnatSnatPolicyAddDelExcludePfx) GetCrcString() string { return "e26dd79a" }
func (*CnatSnatPolicyAddDelExcludePfx) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CnatSnatPolicyAddDelExcludePfx) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1      // m.Prefix.Address.Af
	size += 1 * 16 // m.Prefix.Address.Un
	size += 1      // m.Prefix.Len
	return size
}
func (m *CnatSnatPolicyAddDelExcludePfx) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeUint8(uint8(m.Prefix.Address.Af))
	buf.EncodeBytes(m.Prefix.Address.Un.XXX_UnionData[:], 16)
	buf.EncodeUint8(m.Prefix.Len)
	return buf.Bytes(), nil
}
func (m *CnatSnatPolicyAddDelExcludePfx) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.Prefix.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.Prefix.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.Prefix.Len = buf.DecodeUint8()
	return nil
}

// CnatSnatPolicyAddDelExcludePfxReply defines message 'cnat_snat_policy_add_del_exclude_pfx_reply'.
type CnatSnatPolicyAddDelExcludePfxReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *CnatSnatPolicyAddDelExcludePfxReply) Reset() { *m = CnatSnatPolicyAddDelExcludePfxReply{} }
func (*CnatSnatPolicyAddDelExcludePfxReply) GetMessageName() string {
	return "cnat_snat_policy_add_del_exclude_pfx_reply"
}
func (*CnatSnatPolicyAddDelExcludePfxReply) GetCrcString() string { return "e8d4e804" }
func (*CnatSnatPolicyAddDelExcludePfxReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CnatSnatPolicyAddDelExcludePfxReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *CnatSnatPolicyAddDelExcludePfxReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *CnatSnatPolicyAddDelExcludePfxReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// CnatSnatPolicyAddDelIf defines message 'cnat_snat_policy_add_del_if'.
type CnatSnatPolicyAddDelIf struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	IsAdd     uint8                          `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	Table     CnatSnatPolicyTable            `binapi:"cnat_snat_policy_table,name=table" json:"table,omitempty"`
}

func (m *CnatSnatPolicyAddDelIf) Reset()               { *m = CnatSnatPolicyAddDelIf{} }
func (*CnatSnatPolicyAddDelIf) GetMessageName() string { return "cnat_snat_policy_add_del_if" }
func (*CnatSnatPolicyAddDelIf) GetCrcString() string   { return "4ebb8d02" }
func (*CnatSnatPolicyAddDelIf) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CnatSnatPolicyAddDelIf) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndex
	size += 1 // m.IsAdd
	size += 1 // m.Table
	return size
}
func (m *CnatSnatPolicyAddDelIf) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeUint8(uint8(m.Table))
	return buf.Bytes(), nil
}
func (m *CnatSnatPolicyAddDelIf) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.IsAdd = buf.DecodeUint8()
	m.Table = CnatSnatPolicyTable(buf.DecodeUint8())
	return nil
}

// CnatSnatPolicyAddDelIfReply defines message 'cnat_snat_policy_add_del_if_reply'.
type CnatSnatPolicyAddDelIfReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *CnatSnatPolicyAddDelIfReply) Reset() { *m = CnatSnatPolicyAddDelIfReply{} }
func (*CnatSnatPolicyAddDelIfReply) GetMessageName() string {
	return "cnat_snat_policy_add_del_if_reply"
}
func (*CnatSnatPolicyAddDelIfReply) GetCrcString() string { return "e8d4e804" }
func (*CnatSnatPolicyAddDelIfReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CnatSnatPolicyAddDelIfReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *CnatSnatPolicyAddDelIfReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *CnatSnatPolicyAddDelIfReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// CnatTranslationDel defines message 'cnat_translation_del'.
type CnatTranslationDel struct {
	ID uint32 `binapi:"u32,name=id" json:"id,omitempty"`
}

func (m *CnatTranslationDel) Reset()               { *m = CnatTranslationDel{} }
func (*CnatTranslationDel) GetMessageName() string { return "cnat_translation_del" }
func (*CnatTranslationDel) GetCrcString() string   { return "3a91bde5" }
func (*CnatTranslationDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CnatTranslationDel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.ID
	return size
}
func (m *CnatTranslationDel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.ID)
	return buf.Bytes(), nil
}
func (m *CnatTranslationDel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.ID = buf.DecodeUint32()
	return nil
}

// CnatTranslationDelReply defines message 'cnat_translation_del_reply'.
type CnatTranslationDelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *CnatTranslationDelReply) Reset()               { *m = CnatTranslationDelReply{} }
func (*CnatTranslationDelReply) GetMessageName() string { return "cnat_translation_del_reply" }
func (*CnatTranslationDelReply) GetCrcString() string   { return "e8d4e804" }
func (*CnatTranslationDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CnatTranslationDelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *CnatTranslationDelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *CnatTranslationDelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// CnatTranslationDetails defines message 'cnat_translation_details'.
type CnatTranslationDetails struct {
	Translation CnatTranslation `binapi:"cnat_translation,name=translation" json:"translation,omitempty"`
}

func (m *CnatTranslationDetails) Reset()               { *m = CnatTranslationDetails{} }
func (*CnatTranslationDetails) GetMessageName() string { return "cnat_translation_details" }
func (*CnatTranslationDetails) GetCrcString() string   { return "1a5140b7" }
func (*CnatTranslationDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CnatTranslationDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.Translation.Vip.Addr.Af
	size += 1 * 16 // m.Translation.Vip.Addr.Un
	size += 4      // m.Translation.Vip.SwIfIndex
	size += 1      // m.Translation.Vip.IfAf
	size += 2      // m.Translation.Vip.Port
	size += 4      // m.Translation.ID
	size += 1      // m.Translation.IPProto
	size += 1      // m.Translation.IsRealIP
	size += 1      // m.Translation.Flags
	size += 1      // m.Translation.LbType
	size += 4      // m.Translation.NPaths
	size += 4      // m.Translation.FlowHashConfig
	for j2 := 0; j2 < len(m.Translation.Paths); j2++ {
		var s2 CnatEndpointTuple
		_ = s2
		if j2 < len(m.Translation.Paths) {
			s2 = m.Translation.Paths[j2]
		}
		size += 1      // s2.DstEp.Addr.Af
		size += 1 * 16 // s2.DstEp.Addr.Un
		size += 4      // s2.DstEp.SwIfIndex
		size += 1      // s2.DstEp.IfAf
		size += 2      // s2.DstEp.Port
		size += 1      // s2.SrcEp.Addr.Af
		size += 1 * 16 // s2.SrcEp.Addr.Un
		size += 4      // s2.SrcEp.SwIfIndex
		size += 1      // s2.SrcEp.IfAf
		size += 2      // s2.SrcEp.Port
		size += 1      // s2.Flags
	}
	return size
}
func (m *CnatTranslationDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(uint8(m.Translation.Vip.Addr.Af))
	buf.EncodeBytes(m.Translation.Vip.Addr.Un.XXX_UnionData[:], 16)
	buf.EncodeUint32(uint32(m.Translation.Vip.SwIfIndex))
	buf.EncodeUint8(uint8(m.Translation.Vip.IfAf))
	buf.EncodeUint16(m.Translation.Vip.Port)
	buf.EncodeUint32(m.Translation.ID)
	buf.EncodeUint8(uint8(m.Translation.IPProto))
	buf.EncodeUint8(m.Translation.IsRealIP)
	buf.EncodeUint8(m.Translation.Flags)
	buf.EncodeUint8(uint8(m.Translation.LbType))
	buf.EncodeUint32(uint32(len(m.Translation.Paths)))
	buf.EncodeUint32(uint32(m.Translation.FlowHashConfig))
	for j1 := 0; j1 < len(m.Translation.Paths); j1++ {
		var v1 CnatEndpointTuple // Paths
		if j1 < len(m.Translation.Paths) {
			v1 = m.Translation.Paths[j1]
		}
		buf.EncodeUint8(uint8(v1.DstEp.Addr.Af))
		buf.EncodeBytes(v1.DstEp.Addr.Un.XXX_UnionData[:], 16)
		buf.EncodeUint32(uint32(v1.DstEp.SwIfIndex))
		buf.EncodeUint8(uint8(v1.DstEp.IfAf))
		buf.EncodeUint16(v1.DstEp.Port)
		buf.EncodeUint8(uint8(v1.SrcEp.Addr.Af))
		buf.EncodeBytes(v1.SrcEp.Addr.Un.XXX_UnionData[:], 16)
		buf.EncodeUint32(uint32(v1.SrcEp.SwIfIndex))
		buf.EncodeUint8(uint8(v1.SrcEp.IfAf))
		buf.EncodeUint16(v1.SrcEp.Port)
		buf.EncodeUint8(v1.Flags)
	}
	return buf.Bytes(), nil
}
func (m *CnatTranslationDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Translation.Vip.Addr.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.Translation.Vip.Addr.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.Translation.Vip.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.Translation.Vip.IfAf = ip_types.AddressFamily(buf.DecodeUint8())
	m.Translation.Vip.Port = buf.DecodeUint16()
	m.Translation.ID = buf.DecodeUint32()
	m.Translation.IPProto = ip_types.IPProto(buf.DecodeUint8())
	m.Translation.IsRealIP = buf.DecodeUint8()
	m.Translation.Flags = buf.DecodeUint8()
	m.Translation.LbType = CnatLbType(buf.DecodeUint8())
	m.Translation.NPaths = buf.DecodeUint32()
	m.Translation.FlowHashConfig = ip.IPFlowHashConfigV2(buf.DecodeUint32())
	m.Translation.Paths = make([]CnatEndpointTuple, m.Translation.NPaths)
	for j1 := 0; j1 < len(m.Translation.Paths); j1++ {
		m.Translation.Paths[j1].DstEp.Addr.Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.Translation.Paths[j1].DstEp.Addr.Un.XXX_UnionData[:], buf.DecodeBytes(16))
		m.Translation.Paths[j1].DstEp.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
		m.Translation.Paths[j1].DstEp.IfAf = ip_types.AddressFamily(buf.DecodeUint8())
		m.Translation.Paths[j1].DstEp.Port = buf.DecodeUint16()
		m.Translation.Paths[j1].SrcEp.Addr.Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.Translation.Paths[j1].SrcEp.Addr.Un.XXX_UnionData[:], buf.DecodeBytes(16))
		m.Translation.Paths[j1].SrcEp.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
		m.Translation.Paths[j1].SrcEp.IfAf = ip_types.AddressFamily(buf.DecodeUint8())
		m.Translation.Paths[j1].SrcEp.Port = buf.DecodeUint16()
		m.Translation.Paths[j1].Flags = buf.DecodeUint8()
	}
	return nil
}

// CnatTranslationDump defines message 'cnat_translation_dump'.
type CnatTranslationDump struct{}

func (m *CnatTranslationDump) Reset()               { *m = CnatTranslationDump{} }
func (*CnatTranslationDump) GetMessageName() string { return "cnat_translation_dump" }
func (*CnatTranslationDump) GetCrcString() string   { return "51077d14" }
func (*CnatTranslationDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CnatTranslationDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *CnatTranslationDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *CnatTranslationDump) Unmarshal(b []byte) error {
	return nil
}

// /* An enpoint is either
//   - An IP & a port
//   - An interface, an address familiy and a port
//
// CnatTranslationUpdate defines message 'cnat_translation_update'.
type CnatTranslationUpdate struct {
	Translation CnatTranslation `binapi:"cnat_translation,name=translation" json:"translation,omitempty"`
}

func (m *CnatTranslationUpdate) Reset()               { *m = CnatTranslationUpdate{} }
func (*CnatTranslationUpdate) GetMessageName() string { return "cnat_translation_update" }
func (*CnatTranslationUpdate) GetCrcString() string   { return "f8d40bc5" }
func (*CnatTranslationUpdate) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CnatTranslationUpdate) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.Translation.Vip.Addr.Af
	size += 1 * 16 // m.Translation.Vip.Addr.Un
	size += 4      // m.Translation.Vip.SwIfIndex
	size += 1      // m.Translation.Vip.IfAf
	size += 2      // m.Translation.Vip.Port
	size += 4      // m.Translation.ID
	size += 1      // m.Translation.IPProto
	size += 1      // m.Translation.IsRealIP
	size += 1      // m.Translation.Flags
	size += 1      // m.Translation.LbType
	size += 4      // m.Translation.NPaths
	size += 4      // m.Translation.FlowHashConfig
	for j2 := 0; j2 < len(m.Translation.Paths); j2++ {
		var s2 CnatEndpointTuple
		_ = s2
		if j2 < len(m.Translation.Paths) {
			s2 = m.Translation.Paths[j2]
		}
		size += 1      // s2.DstEp.Addr.Af
		size += 1 * 16 // s2.DstEp.Addr.Un
		size += 4      // s2.DstEp.SwIfIndex
		size += 1      // s2.DstEp.IfAf
		size += 2      // s2.DstEp.Port
		size += 1      // s2.SrcEp.Addr.Af
		size += 1 * 16 // s2.SrcEp.Addr.Un
		size += 4      // s2.SrcEp.SwIfIndex
		size += 1      // s2.SrcEp.IfAf
		size += 2      // s2.SrcEp.Port
		size += 1      // s2.Flags
	}
	return size
}
func (m *CnatTranslationUpdate) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(uint8(m.Translation.Vip.Addr.Af))
	buf.EncodeBytes(m.Translation.Vip.Addr.Un.XXX_UnionData[:], 16)
	buf.EncodeUint32(uint32(m.Translation.Vip.SwIfIndex))
	buf.EncodeUint8(uint8(m.Translation.Vip.IfAf))
	buf.EncodeUint16(m.Translation.Vip.Port)
	buf.EncodeUint32(m.Translation.ID)
	buf.EncodeUint8(uint8(m.Translation.IPProto))
	buf.EncodeUint8(m.Translation.IsRealIP)
	buf.EncodeUint8(m.Translation.Flags)
	buf.EncodeUint8(uint8(m.Translation.LbType))
	buf.EncodeUint32(uint32(len(m.Translation.Paths)))
	buf.EncodeUint32(uint32(m.Translation.FlowHashConfig))
	for j1 := 0; j1 < len(m.Translation.Paths); j1++ {
		var v1 CnatEndpointTuple // Paths
		if j1 < len(m.Translation.Paths) {
			v1 = m.Translation.Paths[j1]
		}
		buf.EncodeUint8(uint8(v1.DstEp.Addr.Af))
		buf.EncodeBytes(v1.DstEp.Addr.Un.XXX_UnionData[:], 16)
		buf.EncodeUint32(uint32(v1.DstEp.SwIfIndex))
		buf.EncodeUint8(uint8(v1.DstEp.IfAf))
		buf.EncodeUint16(v1.DstEp.Port)
		buf.EncodeUint8(uint8(v1.SrcEp.Addr.Af))
		buf.EncodeBytes(v1.SrcEp.Addr.Un.XXX_UnionData[:], 16)
		buf.EncodeUint32(uint32(v1.SrcEp.SwIfIndex))
		buf.EncodeUint8(uint8(v1.SrcEp.IfAf))
		buf.EncodeUint16(v1.SrcEp.Port)
		buf.EncodeUint8(v1.Flags)
	}
	return buf.Bytes(), nil
}
func (m *CnatTranslationUpdate) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Translation.Vip.Addr.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.Translation.Vip.Addr.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.Translation.Vip.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.Translation.Vip.IfAf = ip_types.AddressFamily(buf.DecodeUint8())
	m.Translation.Vip.Port = buf.DecodeUint16()
	m.Translation.ID = buf.DecodeUint32()
	m.Translation.IPProto = ip_types.IPProto(buf.DecodeUint8())
	m.Translation.IsRealIP = buf.DecodeUint8()
	m.Translation.Flags = buf.DecodeUint8()
	m.Translation.LbType = CnatLbType(buf.DecodeUint8())
	m.Translation.NPaths = buf.DecodeUint32()
	m.Translation.FlowHashConfig = ip.IPFlowHashConfigV2(buf.DecodeUint32())
	m.Translation.Paths = make([]CnatEndpointTuple, m.Translation.NPaths)
	for j1 := 0; j1 < len(m.Translation.Paths); j1++ {
		m.Translation.Paths[j1].DstEp.Addr.Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.Translation.Paths[j1].DstEp.Addr.Un.XXX_UnionData[:], buf.DecodeBytes(16))
		m.Translation.Paths[j1].DstEp.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
		m.Translation.Paths[j1].DstEp.IfAf = ip_types.AddressFamily(buf.DecodeUint8())
		m.Translation.Paths[j1].DstEp.Port = buf.DecodeUint16()
		m.Translation.Paths[j1].SrcEp.Addr.Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.Translation.Paths[j1].SrcEp.Addr.Un.XXX_UnionData[:], buf.DecodeBytes(16))
		m.Translation.Paths[j1].SrcEp.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
		m.Translation.Paths[j1].SrcEp.IfAf = ip_types.AddressFamily(buf.DecodeUint8())
		m.Translation.Paths[j1].SrcEp.Port = buf.DecodeUint16()
		m.Translation.Paths[j1].Flags = buf.DecodeUint8()
	}
	return nil
}

// CnatTranslationUpdateReply defines message 'cnat_translation_update_reply'.
type CnatTranslationUpdateReply struct {
	Retval int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	ID     uint32 `binapi:"u32,name=id" json:"id,omitempty"`
}

func (m *CnatTranslationUpdateReply) Reset()               { *m = CnatTranslationUpdateReply{} }
func (*CnatTranslationUpdateReply) GetMessageName() string { return "cnat_translation_update_reply" }
func (*CnatTranslationUpdateReply) GetCrcString() string   { return "e2fc8294" }
func (*CnatTranslationUpdateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CnatTranslationUpdateReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.ID
	return size
}
func (m *CnatTranslationUpdateReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.ID)
	return buf.Bytes(), nil
}
func (m *CnatTranslationUpdateReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.ID = buf.DecodeUint32()
	return nil
}

// Enable or disable interface feature cnat arc
//   - sw_if_index - The interface to enable/disable cnat feature arc.
//   - enable_disable - set to 1 to enable, 0 to disable cnat feature arc
//
// FeatureCnatEnableDisable defines message 'feature_cnat_enable_disable'.
type FeatureCnatEnableDisable struct {
	SwIfIndex     interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	EnableDisable bool                           `binapi:"bool,name=enable_disable" json:"enable_disable,omitempty"`
}

func (m *FeatureCnatEnableDisable) Reset()               { *m = FeatureCnatEnableDisable{} }
func (*FeatureCnatEnableDisable) GetMessageName() string { return "feature_cnat_enable_disable" }
func (*FeatureCnatEnableDisable) GetCrcString() string   { return "5501adee" }
func (*FeatureCnatEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *FeatureCnatEnableDisable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndex
	size += 1 // m.EnableDisable
	return size
}
func (m *FeatureCnatEnableDisable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeBool(m.EnableDisable)
	return buf.Bytes(), nil
}
func (m *FeatureCnatEnableDisable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.EnableDisable = buf.DecodeBool()
	return nil
}

// FeatureCnatEnableDisableReply defines message 'feature_cnat_enable_disable_reply'.
type FeatureCnatEnableDisableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *FeatureCnatEnableDisableReply) Reset() { *m = FeatureCnatEnableDisableReply{} }
func (*FeatureCnatEnableDisableReply) GetMessageName() string {
	return "feature_cnat_enable_disable_reply"
}
func (*FeatureCnatEnableDisableReply) GetCrcString() string { return "e8d4e804" }
func (*FeatureCnatEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *FeatureCnatEnableDisableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *FeatureCnatEnableDisableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *FeatureCnatEnableDisableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

func init() { file_cnat_binapi_init() }
func file_cnat_binapi_init() {
	api.RegisterMessage((*ApplyDefaultCnatSnat)(nil), "apply_default_cnat_snat_f9e6675e")
	api.RegisterMessage((*ApplyDefaultCnatSnatReply)(nil), "apply_default_cnat_snat_reply_e8d4e804")
	api.RegisterMessage((*CnatGetSnatAddresses)(nil), "cnat_get_snat_addresses_51077d14")
	api.RegisterMessage((*CnatGetSnatAddressesReply)(nil), "cnat_get_snat_addresses_reply_879513c1")
	api.RegisterMessage((*CnatSessionDetails)(nil), "cnat_session_details_7a78bf3f")
	api.RegisterMessage((*CnatSessionDump)(nil), "cnat_session_dump_51077d14")
	api.RegisterMessage((*CnatSessionPurge)(nil), "cnat_session_purge_51077d14")
	api.RegisterMessage((*CnatSessionPurgeReply)(nil), "cnat_session_purge_reply_e8d4e804")
	api.RegisterMessage((*CnatSetSnatAddresses)(nil), "cnat_set_snat_addresses_e9472ed4")
	api.RegisterMessage((*CnatSetSnatAddressesReply)(nil), "cnat_set_snat_addresses_reply_e8d4e804")
	api.RegisterMessage((*CnatSetSnatPolicy)(nil), "cnat_set_snat_policy_d3e6eaf4")
	api.RegisterMessage((*CnatSetSnatPolicyReply)(nil), "cnat_set_snat_policy_reply_e8d4e804")
	api.RegisterMessage((*CnatSnatAddressesDetails)(nil), "cnat_snat_addresses_details_09ae6b38")
	api.RegisterMessage((*CnatSnatAddressesDump)(nil), "cnat_snat_addresses_dump_51077d14")
	api.RegisterMessage((*CnatSnatPolicyAddDelExcludePfx)(nil), "cnat_snat_policy_add_del_exclude_pfx_e26dd79a")
	api.RegisterMessage((*CnatSnatPolicyAddDelExcludePfxReply)(nil), "cnat_snat_policy_add_del_exclude_pfx_reply_e8d4e804")
	api.RegisterMessage((*CnatSnatPolicyAddDelIf)(nil), "cnat_snat_policy_add_del_if_4ebb8d02")
	api.RegisterMessage((*CnatSnatPolicyAddDelIfReply)(nil), "cnat_snat_policy_add_del_if_reply_e8d4e804")
	api.RegisterMessage((*CnatTranslationDel)(nil), "cnat_translation_del_3a91bde5")
	api.RegisterMessage((*CnatTranslationDelReply)(nil), "cnat_translation_del_reply_e8d4e804")
	api.RegisterMessage((*CnatTranslationDetails)(nil), "cnat_translation_details_1a5140b7")
	api.RegisterMessage((*CnatTranslationDump)(nil), "cnat_translation_dump_51077d14")
	api.RegisterMessage((*CnatTranslationUpdate)(nil), "cnat_translation_update_f8d40bc5")
	api.RegisterMessage((*CnatTranslationUpdateReply)(nil), "cnat_translation_update_reply_e2fc8294")
	api.RegisterMessage((*FeatureCnatEnableDisable)(nil), "feature_cnat_enable_disable_5501adee")
	api.RegisterMessage((*FeatureCnatEnableDisableReply)(nil), "feature_cnat_enable_disable_reply_e8d4e804")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*ApplyDefaultCnatSnat)(nil),
		(*ApplyDefaultCnatSnatReply)(nil),
		(*CnatGetSnatAddresses)(nil),
		(*CnatGetSnatAddressesReply)(nil),
		(*CnatSessionDetails)(nil),
		(*CnatSessionDump)(nil),
		(*CnatSessionPurge)(nil),
		(*CnatSessionPurgeReply)(nil),
		(*CnatSetSnatAddresses)(nil),
		(*CnatSetSnatAddressesReply)(nil),
		(*CnatSetSnatPolicy)(nil),
		(*CnatSetSnatPolicyReply)(nil),
		(*CnatSnatAddressesDetails)(nil),
		(*CnatSnatAddressesDump)(nil),
		(*CnatSnatPolicyAddDelExcludePfx)(nil),
		(*CnatSnatPolicyAddDelExcludePfxReply)(nil),
		(*CnatSnatPolicyAddDelIf)(nil),
		(*CnatSnatPolicyAddDelIfReply)(nil),
		(*CnatTranslationDel)(nil),
		(*CnatTranslationDelReply)(nil),
		(*CnatTranslationDetails)(nil),
		(*CnatTranslationDump)(nil),
		(*CnatTranslationUpdate)(nil),
		(*CnatTranslationUpdateReply)(nil),
		(*FeatureCnatEnableDisable)(nil),
		(*FeatureCnatEnableDisableReply)(nil),
	}
}
