// Code generated by GoVPP's binapi-generator. DO NOT EDIT.

// Package npol contains generated bindings for API file npol.api.
//
// Contents:
// -  5 enums
// -  8 structs
// -  2 unions
// - 22 messages
package npol

import (
	"strconv"

	_ "github.com/projectcalico/vpp-dataplane/v3/vpplink/generated/bindings/fib_types"
	ip_types "github.com/projectcalico/vpp-dataplane/v3/vpplink/generated/bindings/ip_types"
	api "go.fd.io/govpp/api"
	codec "go.fd.io/govpp/codec"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "npol"
	APIVersion = "0.1.0"
	VersionCrc = 0x79451d1
)

// NpolEntryType defines enum 'npol_entry_type'.
type NpolEntryType uint8

const (
	NPOL_CIDR        NpolEntryType = 0
	NPOL_PORT_RANGE  NpolEntryType = 1
	NPOL_PORT_IP_SET NpolEntryType = 2
	NPOL_IP_SET      NpolEntryType = 3
)

var (
	NpolEntryType_name = map[uint8]string{
		0: "NPOL_CIDR",
		1: "NPOL_PORT_RANGE",
		2: "NPOL_PORT_IP_SET",
		3: "NPOL_IP_SET",
	}
	NpolEntryType_value = map[string]uint8{
		"NPOL_CIDR":        0,
		"NPOL_PORT_RANGE":  1,
		"NPOL_PORT_IP_SET": 2,
		"NPOL_IP_SET":      3,
	}
)

func (x NpolEntryType) String() string {
	s, ok := NpolEntryType_name[uint8(x)]
	if ok {
		return s
	}
	return "NpolEntryType(" + strconv.Itoa(int(x)) + ")"
}

// NpolIpsetType defines enum 'npol_ipset_type'.
type NpolIpsetType uint8

const (
	NPOL_IP          NpolIpsetType = 0
	NPOL_IP_AND_PORT NpolIpsetType = 1
	NPOL_NET         NpolIpsetType = 2
)

var (
	NpolIpsetType_name = map[uint8]string{
		0: "NPOL_IP",
		1: "NPOL_IP_AND_PORT",
		2: "NPOL_NET",
	}
	NpolIpsetType_value = map[string]uint8{
		"NPOL_IP":          0,
		"NPOL_IP_AND_PORT": 1,
		"NPOL_NET":         2,
	}
)

func (x NpolIpsetType) String() string {
	s, ok := NpolIpsetType_name[uint8(x)]
	if ok {
		return s
	}
	return "NpolIpsetType(" + strconv.Itoa(int(x)) + ")"
}

// NpolPolicyDefault defines enum 'npol_policy_default'.
type NpolPolicyDefault uint8

const (
	NPOL_DEFAULT_ALLOW NpolPolicyDefault = 0
	NPOL_DEFAULT_DENY  NpolPolicyDefault = 1
	NPOL_DEFAULT_PASS  NpolPolicyDefault = 2
)

var (
	NpolPolicyDefault_name = map[uint8]string{
		0: "NPOL_DEFAULT_ALLOW",
		1: "NPOL_DEFAULT_DENY",
		2: "NPOL_DEFAULT_PASS",
	}
	NpolPolicyDefault_value = map[string]uint8{
		"NPOL_DEFAULT_ALLOW": 0,
		"NPOL_DEFAULT_DENY":  1,
		"NPOL_DEFAULT_PASS":  2,
	}
)

func (x NpolPolicyDefault) String() string {
	s, ok := NpolPolicyDefault_name[uint8(x)]
	if ok {
		return s
	}
	return "NpolPolicyDefault(" + strconv.Itoa(int(x)) + ")"
}

// NpolRuleAction defines enum 'npol_rule_action'.
type NpolRuleAction uint8

const (
	NPOL_ALLOW NpolRuleAction = 0
	NPOL_DENY  NpolRuleAction = 1
	NPOL_LOG   NpolRuleAction = 2
	NPOL_PASS  NpolRuleAction = 3
)

var (
	NpolRuleAction_name = map[uint8]string{
		0: "NPOL_ALLOW",
		1: "NPOL_DENY",
		2: "NPOL_LOG",
		3: "NPOL_PASS",
	}
	NpolRuleAction_value = map[string]uint8{
		"NPOL_ALLOW": 0,
		"NPOL_DENY":  1,
		"NPOL_LOG":   2,
		"NPOL_PASS":  3,
	}
)

func (x NpolRuleAction) String() string {
	s, ok := NpolRuleAction_name[uint8(x)]
	if ok {
		return s
	}
	return "NpolRuleAction(" + strconv.Itoa(int(x)) + ")"
}

// NpolRuleFilterType defines enum 'npol_rule_filter_type'.
type NpolRuleFilterType uint8

const (
	NPOL_RULE_FILTER_NONE_TYPE NpolRuleFilterType = 0
	NPOL_RULE_FILTER_ICMP_TYPE NpolRuleFilterType = 1
	NPOL_RULE_FILTER_ICMP_CODE NpolRuleFilterType = 2
	NPOL_RULE_FILTER_L4_PROTO  NpolRuleFilterType = 3
)

var (
	NpolRuleFilterType_name = map[uint8]string{
		0: "NPOL_RULE_FILTER_NONE_TYPE",
		1: "NPOL_RULE_FILTER_ICMP_TYPE",
		2: "NPOL_RULE_FILTER_ICMP_CODE",
		3: "NPOL_RULE_FILTER_L4_PROTO",
	}
	NpolRuleFilterType_value = map[string]uint8{
		"NPOL_RULE_FILTER_NONE_TYPE": 0,
		"NPOL_RULE_FILTER_ICMP_TYPE": 1,
		"NPOL_RULE_FILTER_ICMP_CODE": 2,
		"NPOL_RULE_FILTER_L4_PROTO":  3,
	}
)

func (x NpolRuleFilterType) String() string {
	s, ok := NpolRuleFilterType_name[uint8(x)]
	if ok {
		return s
	}
	return "NpolRuleFilterType(" + strconv.Itoa(int(x)) + ")"
}

// NpolEntrySetID defines type 'npol_entry_set_id'.
type NpolEntrySetID struct {
	SetID uint32 `binapi:"u32,name=set_id" json:"set_id,omitempty"`
}

// NpolIpsetMember defines type 'npol_ipset_member'.
type NpolIpsetMember struct {
	Val NpolIpsetMemberValUnion `binapi:"npol_ipset_member_val,name=val" json:"val,omitempty"`
}

// NpolPolicyItem defines type 'npol_policy_item'.
type NpolPolicyItem struct {
	IsInbound bool   `binapi:"bool,name=is_inbound" json:"is_inbound,omitempty"`
	RuleID    uint32 `binapi:"u32,name=rule_id" json:"rule_id,omitempty"`
}

// NpolPortRange defines type 'npol_port_range'.
type NpolPortRange struct {
	Start uint16 `binapi:"u16,name=start" json:"start,omitempty"`
	End   uint16 `binapi:"u16,name=end" json:"end,omitempty"`
}

// NpolRule defines type 'npol_rule'.
type NpolRule struct {
	Action     NpolRuleAction    `binapi:"npol_rule_action,name=action" json:"action,omitempty"`
	Filters    [3]NpolRuleFilter `binapi:"npol_rule_filter[3],name=filters" json:"filters,omitempty"`
	NumEntries uint32            `binapi:"u32,name=num_entries" json:"-"`
	Matches    []NpolRuleEntry   `binapi:"npol_rule_entry[num_entries],name=matches" json:"matches,omitempty"`
}

// NpolRuleEntry defines type 'npol_rule_entry'.
type NpolRuleEntry struct {
	IsSrc bool               `binapi:"bool,name=is_src" json:"is_src,omitempty"`
	IsNot bool               `binapi:"bool,name=is_not" json:"is_not,omitempty"`
	Type  NpolEntryType      `binapi:"npol_entry_type,name=type" json:"type,omitempty"`
	Data  NpolEntryDataUnion `binapi:"npol_entry_data,name=data" json:"data,omitempty"`
}

// NpolRuleFilter defines type 'npol_rule_filter'.
type NpolRuleFilter struct {
	Value       uint32             `binapi:"u32,name=value" json:"value,omitempty"`
	Type        NpolRuleFilterType `binapi:"npol_rule_filter_type,name=type" json:"type,omitempty"`
	ShouldMatch uint8              `binapi:"u8,name=should_match" json:"should_match,omitempty"`
}

// NpolThreeTuple defines type 'npol_three_tuple'.
type NpolThreeTuple struct {
	Address ip_types.Address `binapi:"address,name=address" json:"address,omitempty"`
	L4Proto uint8            `binapi:"u8,name=l4_proto" json:"l4_proto,omitempty"`
	Port    uint16           `binapi:"u16,name=port" json:"port,omitempty"`
}

// NpolEntryDataUnion defines union 'npol_entry_data'.
type NpolEntryDataUnion struct {
	// NpolEntryDataUnion can be one of:
	// - Cidr *ip_types.Prefix
	// - PortRange *NpolPortRange
	// - SetID *NpolEntrySetID
	XXX_UnionData [18]byte
}

func NpolEntryDataUnionCidr(a ip_types.Prefix) (u NpolEntryDataUnion) {
	u.SetCidr(a)
	return
}
func (u *NpolEntryDataUnion) SetCidr(a ip_types.Prefix) {
	buf := codec.NewBuffer(u.XXX_UnionData[:])
	buf.EncodeUint8(uint8(a.Address.Af))
	buf.EncodeBytes(a.Address.Un.XXX_UnionData[:], 16)
	buf.EncodeUint8(a.Len)
}
func (u *NpolEntryDataUnion) GetCidr() (a ip_types.Prefix) {
	buf := codec.NewBuffer(u.XXX_UnionData[:])
	a.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(a.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	a.Len = buf.DecodeUint8()
	return
}

func NpolEntryDataUnionPortRange(a NpolPortRange) (u NpolEntryDataUnion) {
	u.SetPortRange(a)
	return
}
func (u *NpolEntryDataUnion) SetPortRange(a NpolPortRange) {
	buf := codec.NewBuffer(u.XXX_UnionData[:])
	buf.EncodeUint16(a.Start)
	buf.EncodeUint16(a.End)
}
func (u *NpolEntryDataUnion) GetPortRange() (a NpolPortRange) {
	buf := codec.NewBuffer(u.XXX_UnionData[:])
	a.Start = buf.DecodeUint16()
	a.End = buf.DecodeUint16()
	return
}

func NpolEntryDataUnionSetID(a NpolEntrySetID) (u NpolEntryDataUnion) {
	u.SetSetID(a)
	return
}
func (u *NpolEntryDataUnion) SetSetID(a NpolEntrySetID) {
	buf := codec.NewBuffer(u.XXX_UnionData[:])
	buf.EncodeUint32(a.SetID)
}
func (u *NpolEntryDataUnion) GetSetID() (a NpolEntrySetID) {
	buf := codec.NewBuffer(u.XXX_UnionData[:])
	a.SetID = buf.DecodeUint32()
	return
}

// NpolIpsetMemberValUnion defines union 'npol_ipset_member_val'.
type NpolIpsetMemberValUnion struct {
	// NpolIpsetMemberValUnion can be one of:
	// - Address *ip_types.Address
	// - Prefix *ip_types.Prefix
	// - Tuple *NpolThreeTuple
	XXX_UnionData [20]byte
}

func NpolIpsetMemberValUnionAddress(a ip_types.Address) (u NpolIpsetMemberValUnion) {
	u.SetAddress(a)
	return
}
func (u *NpolIpsetMemberValUnion) SetAddress(a ip_types.Address) {
	buf := codec.NewBuffer(u.XXX_UnionData[:])
	buf.EncodeUint8(uint8(a.Af))
	buf.EncodeBytes(a.Un.XXX_UnionData[:], 16)
}
func (u *NpolIpsetMemberValUnion) GetAddress() (a ip_types.Address) {
	buf := codec.NewBuffer(u.XXX_UnionData[:])
	a.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(a.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	return
}

func NpolIpsetMemberValUnionPrefix(a ip_types.Prefix) (u NpolIpsetMemberValUnion) {
	u.SetPrefix(a)
	return
}
func (u *NpolIpsetMemberValUnion) SetPrefix(a ip_types.Prefix) {
	buf := codec.NewBuffer(u.XXX_UnionData[:])
	buf.EncodeUint8(uint8(a.Address.Af))
	buf.EncodeBytes(a.Address.Un.XXX_UnionData[:], 16)
	buf.EncodeUint8(a.Len)
}
func (u *NpolIpsetMemberValUnion) GetPrefix() (a ip_types.Prefix) {
	buf := codec.NewBuffer(u.XXX_UnionData[:])
	a.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(a.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	a.Len = buf.DecodeUint8()
	return
}

func NpolIpsetMemberValUnionTuple(a NpolThreeTuple) (u NpolIpsetMemberValUnion) {
	u.SetTuple(a)
	return
}
func (u *NpolIpsetMemberValUnion) SetTuple(a NpolThreeTuple) {
	buf := codec.NewBuffer(u.XXX_UnionData[:])
	buf.EncodeUint8(uint8(a.Address.Af))
	buf.EncodeBytes(a.Address.Un.XXX_UnionData[:], 16)
	buf.EncodeUint8(a.L4Proto)
	buf.EncodeUint16(a.Port)
}
func (u *NpolIpsetMemberValUnion) GetTuple() (a NpolThreeTuple) {
	buf := codec.NewBuffer(u.XXX_UnionData[:])
	a.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(a.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	a.L4Proto = buf.DecodeUint8()
	a.Port = buf.DecodeUint16()
	return
}

// NpolConfigurePolicies defines message 'npol_configure_policies'.
type NpolConfigurePolicies struct {
	SwIfIndex        uint32            `binapi:"u32,name=sw_if_index" json:"sw_if_index,omitempty"`
	NumRxPolicies    uint32            `binapi:"u32,name=num_rx_policies" json:"num_rx_policies,omitempty"`
	NumTxPolicies    uint32            `binapi:"u32,name=num_tx_policies" json:"num_tx_policies,omitempty"`
	TotalIds         uint32            `binapi:"u32,name=total_ids" json:"-"`
	InvertRxTx       uint8             `binapi:"u8,name=invert_rx_tx" json:"invert_rx_tx,omitempty"`
	PolicyDefaultRx  NpolPolicyDefault `binapi:"npol_policy_default,name=policy_default_rx" json:"policy_default_rx,omitempty"`
	PolicyDefaultTx  NpolPolicyDefault `binapi:"npol_policy_default,name=policy_default_tx" json:"policy_default_tx,omitempty"`
	ProfileDefaultRx NpolPolicyDefault `binapi:"npol_policy_default,name=profile_default_rx" json:"profile_default_rx,omitempty"`
	ProfileDefaultTx NpolPolicyDefault `binapi:"npol_policy_default,name=profile_default_tx" json:"profile_default_tx,omitempty"`
	PolicyIds        []uint32          `binapi:"u32[total_ids],name=policy_ids" json:"policy_ids,omitempty"`
}

func (m *NpolConfigurePolicies) Reset()               { *m = NpolConfigurePolicies{} }
func (*NpolConfigurePolicies) GetMessageName() string { return "npol_configure_policies" }
func (*NpolConfigurePolicies) GetCrcString() string   { return "66fe1335" }
func (*NpolConfigurePolicies) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *NpolConfigurePolicies) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4                    // m.SwIfIndex
	size += 4                    // m.NumRxPolicies
	size += 4                    // m.NumTxPolicies
	size += 4                    // m.TotalIds
	size += 1                    // m.InvertRxTx
	size += 1                    // m.PolicyDefaultRx
	size += 1                    // m.PolicyDefaultTx
	size += 1                    // m.ProfileDefaultRx
	size += 1                    // m.ProfileDefaultTx
	size += 4 * len(m.PolicyIds) // m.PolicyIds
	return size
}
func (m *NpolConfigurePolicies) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.SwIfIndex)
	buf.EncodeUint32(m.NumRxPolicies)
	buf.EncodeUint32(m.NumTxPolicies)
	buf.EncodeUint32(uint32(len(m.PolicyIds)))
	buf.EncodeUint8(m.InvertRxTx)
	buf.EncodeUint8(uint8(m.PolicyDefaultRx))
	buf.EncodeUint8(uint8(m.PolicyDefaultTx))
	buf.EncodeUint8(uint8(m.ProfileDefaultRx))
	buf.EncodeUint8(uint8(m.ProfileDefaultTx))
	for i := 0; i < len(m.PolicyIds); i++ {
		var x uint32
		if i < len(m.PolicyIds) {
			x = uint32(m.PolicyIds[i])
		}
		buf.EncodeUint32(x)
	}
	return buf.Bytes(), nil
}
func (m *NpolConfigurePolicies) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = buf.DecodeUint32()
	m.NumRxPolicies = buf.DecodeUint32()
	m.NumTxPolicies = buf.DecodeUint32()
	m.TotalIds = buf.DecodeUint32()
	m.InvertRxTx = buf.DecodeUint8()
	m.PolicyDefaultRx = NpolPolicyDefault(buf.DecodeUint8())
	m.PolicyDefaultTx = NpolPolicyDefault(buf.DecodeUint8())
	m.ProfileDefaultRx = NpolPolicyDefault(buf.DecodeUint8())
	m.ProfileDefaultTx = NpolPolicyDefault(buf.DecodeUint8())
	m.PolicyIds = make([]uint32, m.TotalIds)
	for i := 0; i < len(m.PolicyIds); i++ {
		m.PolicyIds[i] = buf.DecodeUint32()
	}
	return nil
}

// NpolConfigurePoliciesReply defines message 'npol_configure_policies_reply'.
type NpolConfigurePoliciesReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *NpolConfigurePoliciesReply) Reset()               { *m = NpolConfigurePoliciesReply{} }
func (*NpolConfigurePoliciesReply) GetMessageName() string { return "npol_configure_policies_reply" }
func (*NpolConfigurePoliciesReply) GetCrcString() string   { return "e8d4e804" }
func (*NpolConfigurePoliciesReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *NpolConfigurePoliciesReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *NpolConfigurePoliciesReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *NpolConfigurePoliciesReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Get the plugin version
// NpolGetVersion defines message 'npol_get_version'.
type NpolGetVersion struct{}

func (m *NpolGetVersion) Reset()               { *m = NpolGetVersion{} }
func (*NpolGetVersion) GetMessageName() string { return "npol_get_version" }
func (*NpolGetVersion) GetCrcString() string   { return "51077d14" }
func (*NpolGetVersion) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *NpolGetVersion) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *NpolGetVersion) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *NpolGetVersion) Unmarshal(b []byte) error {
	return nil
}

// Reply to get the plugin version
//   - major - Incremented every time a known breaking behavior change is introduced
//   - minor - Incremented with small changes, may be used to avoid buggy versions
//
// NpolGetVersionReply defines message 'npol_get_version_reply'.
type NpolGetVersionReply struct {
	Major uint32 `binapi:"u32,name=major" json:"major,omitempty"`
	Minor uint32 `binapi:"u32,name=minor" json:"minor,omitempty"`
}

func (m *NpolGetVersionReply) Reset()               { *m = NpolGetVersionReply{} }
func (*NpolGetVersionReply) GetMessageName() string { return "npol_get_version_reply" }
func (*NpolGetVersionReply) GetCrcString() string   { return "9b32cf86" }
func (*NpolGetVersionReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *NpolGetVersionReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Major
	size += 4 // m.Minor
	return size
}
func (m *NpolGetVersionReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Major)
	buf.EncodeUint32(m.Minor)
	return buf.Bytes(), nil
}
func (m *NpolGetVersionReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Major = buf.DecodeUint32()
	m.Minor = buf.DecodeUint32()
	return nil
}

// NpolIpsetAddDelMembers defines message 'npol_ipset_add_del_members'.
type NpolIpsetAddDelMembers struct {
	SetID   uint32            `binapi:"u32,name=set_id" json:"set_id,omitempty"`
	IsAdd   bool              `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	Len     uint32            `binapi:"u32,name=len" json:"-"`
	Members []NpolIpsetMember `binapi:"npol_ipset_member[len],name=members" json:"members,omitempty"`
}

func (m *NpolIpsetAddDelMembers) Reset()               { *m = NpolIpsetAddDelMembers{} }
func (*NpolIpsetAddDelMembers) GetMessageName() string { return "npol_ipset_add_del_members" }
func (*NpolIpsetAddDelMembers) GetCrcString() string   { return "8ad1b2ed" }
func (*NpolIpsetAddDelMembers) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *NpolIpsetAddDelMembers) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SetID
	size += 1 // m.IsAdd
	size += 4 // m.Len
	for j1 := 0; j1 < len(m.Members); j1++ {
		var s1 NpolIpsetMember
		_ = s1
		if j1 < len(m.Members) {
			s1 = m.Members[j1]
		}
		size += 1 * 20 // s1.Val
	}
	return size
}
func (m *NpolIpsetAddDelMembers) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.SetID)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeUint32(uint32(len(m.Members)))
	for j0 := 0; j0 < len(m.Members); j0++ {
		var v0 NpolIpsetMember // Members
		if j0 < len(m.Members) {
			v0 = m.Members[j0]
		}
		buf.EncodeBytes(v0.Val.XXX_UnionData[:], 20)
	}
	return buf.Bytes(), nil
}
func (m *NpolIpsetAddDelMembers) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SetID = buf.DecodeUint32()
	m.IsAdd = buf.DecodeBool()
	m.Len = buf.DecodeUint32()
	m.Members = make([]NpolIpsetMember, m.Len)
	for j0 := 0; j0 < len(m.Members); j0++ {
		copy(m.Members[j0].Val.XXX_UnionData[:], buf.DecodeBytes(20))
	}
	return nil
}

// NpolIpsetAddDelMembersReply defines message 'npol_ipset_add_del_members_reply'.
type NpolIpsetAddDelMembersReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *NpolIpsetAddDelMembersReply) Reset() { *m = NpolIpsetAddDelMembersReply{} }
func (*NpolIpsetAddDelMembersReply) GetMessageName() string {
	return "npol_ipset_add_del_members_reply"
}
func (*NpolIpsetAddDelMembersReply) GetCrcString() string { return "e8d4e804" }
func (*NpolIpsetAddDelMembersReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *NpolIpsetAddDelMembersReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *NpolIpsetAddDelMembersReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *NpolIpsetAddDelMembersReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// NpolIpsetCreate defines message 'npol_ipset_create'.
type NpolIpsetCreate struct {
	Type NpolIpsetType `binapi:"npol_ipset_type,name=type" json:"type,omitempty"`
}

func (m *NpolIpsetCreate) Reset()               { *m = NpolIpsetCreate{} }
func (*NpolIpsetCreate) GetMessageName() string { return "npol_ipset_create" }
func (*NpolIpsetCreate) GetCrcString() string   { return "f948b404" }
func (*NpolIpsetCreate) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *NpolIpsetCreate) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.Type
	return size
}
func (m *NpolIpsetCreate) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(uint8(m.Type))
	return buf.Bytes(), nil
}
func (m *NpolIpsetCreate) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Type = NpolIpsetType(buf.DecodeUint8())
	return nil
}

// NpolIpsetCreateReply defines message 'npol_ipset_create_reply'.
type NpolIpsetCreateReply struct {
	Retval int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	SetID  uint32 `binapi:"u32,name=set_id" json:"set_id,omitempty"`
}

func (m *NpolIpsetCreateReply) Reset()               { *m = NpolIpsetCreateReply{} }
func (*NpolIpsetCreateReply) GetMessageName() string { return "npol_ipset_create_reply" }
func (*NpolIpsetCreateReply) GetCrcString() string   { return "6a43f193" }
func (*NpolIpsetCreateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *NpolIpsetCreateReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.SetID
	return size
}
func (m *NpolIpsetCreateReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.SetID)
	return buf.Bytes(), nil
}
func (m *NpolIpsetCreateReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.SetID = buf.DecodeUint32()
	return nil
}

// NpolIpsetDelete defines message 'npol_ipset_delete'.
type NpolIpsetDelete struct {
	SetID uint32 `binapi:"u32,name=set_id" json:"set_id,omitempty"`
}

func (m *NpolIpsetDelete) Reset()               { *m = NpolIpsetDelete{} }
func (*NpolIpsetDelete) GetMessageName() string { return "npol_ipset_delete" }
func (*NpolIpsetDelete) GetCrcString() string   { return "ceacdbcb" }
func (*NpolIpsetDelete) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *NpolIpsetDelete) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SetID
	return size
}
func (m *NpolIpsetDelete) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.SetID)
	return buf.Bytes(), nil
}
func (m *NpolIpsetDelete) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SetID = buf.DecodeUint32()
	return nil
}

// NpolIpsetDeleteReply defines message 'npol_ipset_delete_reply'.
type NpolIpsetDeleteReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *NpolIpsetDeleteReply) Reset()               { *m = NpolIpsetDeleteReply{} }
func (*NpolIpsetDeleteReply) GetMessageName() string { return "npol_ipset_delete_reply" }
func (*NpolIpsetDeleteReply) GetCrcString() string   { return "e8d4e804" }
func (*NpolIpsetDeleteReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *NpolIpsetDeleteReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *NpolIpsetDeleteReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *NpolIpsetDeleteReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// NpolPolicyCreate defines message 'npol_policy_create'.
type NpolPolicyCreate struct {
	NumItems uint32           `binapi:"u32,name=num_items" json:"-"`
	Rules    []NpolPolicyItem `binapi:"npol_policy_item[num_items],name=rules" json:"rules,omitempty"`
}

func (m *NpolPolicyCreate) Reset()               { *m = NpolPolicyCreate{} }
func (*NpolPolicyCreate) GetMessageName() string { return "npol_policy_create" }
func (*NpolPolicyCreate) GetCrcString() string   { return "3441bb97" }
func (*NpolPolicyCreate) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *NpolPolicyCreate) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.NumItems
	for j1 := 0; j1 < len(m.Rules); j1++ {
		var s1 NpolPolicyItem
		_ = s1
		if j1 < len(m.Rules) {
			s1 = m.Rules[j1]
		}
		size += 1 // s1.IsInbound
		size += 4 // s1.RuleID
	}
	return size
}
func (m *NpolPolicyCreate) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(len(m.Rules)))
	for j0 := 0; j0 < len(m.Rules); j0++ {
		var v0 NpolPolicyItem // Rules
		if j0 < len(m.Rules) {
			v0 = m.Rules[j0]
		}
		buf.EncodeBool(v0.IsInbound)
		buf.EncodeUint32(v0.RuleID)
	}
	return buf.Bytes(), nil
}
func (m *NpolPolicyCreate) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.NumItems = buf.DecodeUint32()
	m.Rules = make([]NpolPolicyItem, m.NumItems)
	for j0 := 0; j0 < len(m.Rules); j0++ {
		m.Rules[j0].IsInbound = buf.DecodeBool()
		m.Rules[j0].RuleID = buf.DecodeUint32()
	}
	return nil
}

// NpolPolicyCreateReply defines message 'npol_policy_create_reply'.
type NpolPolicyCreateReply struct {
	Retval   int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	PolicyID uint32 `binapi:"u32,name=policy_id" json:"policy_id,omitempty"`
}

func (m *NpolPolicyCreateReply) Reset()               { *m = NpolPolicyCreateReply{} }
func (*NpolPolicyCreateReply) GetMessageName() string { return "npol_policy_create_reply" }
func (*NpolPolicyCreateReply) GetCrcString() string   { return "90f27405" }
func (*NpolPolicyCreateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *NpolPolicyCreateReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.PolicyID
	return size
}
func (m *NpolPolicyCreateReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.PolicyID)
	return buf.Bytes(), nil
}
func (m *NpolPolicyCreateReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.PolicyID = buf.DecodeUint32()
	return nil
}

// NpolPolicyDelete defines message 'npol_policy_delete'.
type NpolPolicyDelete struct {
	PolicyID uint32 `binapi:"u32,name=policy_id" json:"policy_id,omitempty"`
}

func (m *NpolPolicyDelete) Reset()               { *m = NpolPolicyDelete{} }
func (*NpolPolicyDelete) GetMessageName() string { return "npol_policy_delete" }
func (*NpolPolicyDelete) GetCrcString() string   { return "ad833868" }
func (*NpolPolicyDelete) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *NpolPolicyDelete) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.PolicyID
	return size
}
func (m *NpolPolicyDelete) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.PolicyID)
	return buf.Bytes(), nil
}
func (m *NpolPolicyDelete) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.PolicyID = buf.DecodeUint32()
	return nil
}

// NpolPolicyDeleteReply defines message 'npol_policy_delete_reply'.
type NpolPolicyDeleteReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *NpolPolicyDeleteReply) Reset()               { *m = NpolPolicyDeleteReply{} }
func (*NpolPolicyDeleteReply) GetMessageName() string { return "npol_policy_delete_reply" }
func (*NpolPolicyDeleteReply) GetCrcString() string   { return "e8d4e804" }
func (*NpolPolicyDeleteReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *NpolPolicyDeleteReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *NpolPolicyDeleteReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *NpolPolicyDeleteReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// NpolPolicyUpdate defines message 'npol_policy_update'.
type NpolPolicyUpdate struct {
	PolicyID uint32           `binapi:"u32,name=policy_id" json:"policy_id,omitempty"`
	NumItems uint32           `binapi:"u32,name=num_items" json:"-"`
	Rules    []NpolPolicyItem `binapi:"npol_policy_item[num_items],name=rules" json:"rules,omitempty"`
}

func (m *NpolPolicyUpdate) Reset()               { *m = NpolPolicyUpdate{} }
func (*NpolPolicyUpdate) GetMessageName() string { return "npol_policy_update" }
func (*NpolPolicyUpdate) GetCrcString() string   { return "21a5f7ef" }
func (*NpolPolicyUpdate) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *NpolPolicyUpdate) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.PolicyID
	size += 4 // m.NumItems
	for j1 := 0; j1 < len(m.Rules); j1++ {
		var s1 NpolPolicyItem
		_ = s1
		if j1 < len(m.Rules) {
			s1 = m.Rules[j1]
		}
		size += 1 // s1.IsInbound
		size += 4 // s1.RuleID
	}
	return size
}
func (m *NpolPolicyUpdate) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.PolicyID)
	buf.EncodeUint32(uint32(len(m.Rules)))
	for j0 := 0; j0 < len(m.Rules); j0++ {
		var v0 NpolPolicyItem // Rules
		if j0 < len(m.Rules) {
			v0 = m.Rules[j0]
		}
		buf.EncodeBool(v0.IsInbound)
		buf.EncodeUint32(v0.RuleID)
	}
	return buf.Bytes(), nil
}
func (m *NpolPolicyUpdate) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.PolicyID = buf.DecodeUint32()
	m.NumItems = buf.DecodeUint32()
	m.Rules = make([]NpolPolicyItem, m.NumItems)
	for j0 := 0; j0 < len(m.Rules); j0++ {
		m.Rules[j0].IsInbound = buf.DecodeBool()
		m.Rules[j0].RuleID = buf.DecodeUint32()
	}
	return nil
}

// NpolPolicyUpdateReply defines message 'npol_policy_update_reply'.
type NpolPolicyUpdateReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *NpolPolicyUpdateReply) Reset()               { *m = NpolPolicyUpdateReply{} }
func (*NpolPolicyUpdateReply) GetMessageName() string { return "npol_policy_update_reply" }
func (*NpolPolicyUpdateReply) GetCrcString() string   { return "e8d4e804" }
func (*NpolPolicyUpdateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *NpolPolicyUpdateReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *NpolPolicyUpdateReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *NpolPolicyUpdateReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// // where the packet only needs to match one entry in either category
// NpolRuleCreate defines message 'npol_rule_create'.
type NpolRuleCreate struct {
	Rule NpolRule `binapi:"npol_rule,name=rule" json:"rule,omitempty"`
}

func (m *NpolRuleCreate) Reset()               { *m = NpolRuleCreate{} }
func (*NpolRuleCreate) GetMessageName() string { return "npol_rule_create" }
func (*NpolRuleCreate) GetCrcString() string   { return "f113de45" }
func (*NpolRuleCreate) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *NpolRuleCreate) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.Rule.Action
	for j2 := 0; j2 < 3; j2++ {
		size += 4 // m.Rule.Filters[j2].Value
		size += 1 // m.Rule.Filters[j2].Type
		size += 1 // m.Rule.Filters[j2].ShouldMatch
	}
	size += 4 // m.Rule.NumEntries
	for j2 := 0; j2 < len(m.Rule.Matches); j2++ {
		var s2 NpolRuleEntry
		_ = s2
		if j2 < len(m.Rule.Matches) {
			s2 = m.Rule.Matches[j2]
		}
		size += 1      // s2.IsSrc
		size += 1      // s2.IsNot
		size += 1      // s2.Type
		size += 1 * 18 // s2.Data
	}
	return size
}
func (m *NpolRuleCreate) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(uint8(m.Rule.Action))
	for j1 := 0; j1 < 3; j1++ {
		buf.EncodeUint32(m.Rule.Filters[j1].Value)
		buf.EncodeUint8(uint8(m.Rule.Filters[j1].Type))
		buf.EncodeUint8(m.Rule.Filters[j1].ShouldMatch)
	}
	buf.EncodeUint32(uint32(len(m.Rule.Matches)))
	for j1 := 0; j1 < len(m.Rule.Matches); j1++ {
		var v1 NpolRuleEntry // Matches
		if j1 < len(m.Rule.Matches) {
			v1 = m.Rule.Matches[j1]
		}
		buf.EncodeBool(v1.IsSrc)
		buf.EncodeBool(v1.IsNot)
		buf.EncodeUint8(uint8(v1.Type))
		buf.EncodeBytes(v1.Data.XXX_UnionData[:], 18)
	}
	return buf.Bytes(), nil
}
func (m *NpolRuleCreate) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Rule.Action = NpolRuleAction(buf.DecodeUint8())
	for j1 := 0; j1 < 3; j1++ {
		m.Rule.Filters[j1].Value = buf.DecodeUint32()
		m.Rule.Filters[j1].Type = NpolRuleFilterType(buf.DecodeUint8())
		m.Rule.Filters[j1].ShouldMatch = buf.DecodeUint8()
	}
	m.Rule.NumEntries = buf.DecodeUint32()
	m.Rule.Matches = make([]NpolRuleEntry, m.Rule.NumEntries)
	for j1 := 0; j1 < len(m.Rule.Matches); j1++ {
		m.Rule.Matches[j1].IsSrc = buf.DecodeBool()
		m.Rule.Matches[j1].IsNot = buf.DecodeBool()
		m.Rule.Matches[j1].Type = NpolEntryType(buf.DecodeUint8())
		copy(m.Rule.Matches[j1].Data.XXX_UnionData[:], buf.DecodeBytes(18))
	}
	return nil
}

// NpolRuleCreateReply defines message 'npol_rule_create_reply'.
type NpolRuleCreateReply struct {
	Retval int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	RuleID uint32 `binapi:"u32,name=rule_id" json:"rule_id,omitempty"`
}

func (m *NpolRuleCreateReply) Reset()               { *m = NpolRuleCreateReply{} }
func (*NpolRuleCreateReply) GetMessageName() string { return "npol_rule_create_reply" }
func (*NpolRuleCreateReply) GetCrcString() string   { return "b48f8052" }
func (*NpolRuleCreateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *NpolRuleCreateReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.RuleID
	return size
}
func (m *NpolRuleCreateReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.RuleID)
	return buf.Bytes(), nil
}
func (m *NpolRuleCreateReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.RuleID = buf.DecodeUint32()
	return nil
}

// NpolRuleDelete defines message 'npol_rule_delete'.
type NpolRuleDelete struct {
	RuleID uint32 `binapi:"u32,name=rule_id" json:"rule_id,omitempty"`
}

func (m *NpolRuleDelete) Reset()               { *m = NpolRuleDelete{} }
func (*NpolRuleDelete) GetMessageName() string { return "npol_rule_delete" }
func (*NpolRuleDelete) GetCrcString() string   { return "d19bb6be" }
func (*NpolRuleDelete) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *NpolRuleDelete) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.RuleID
	return size
}
func (m *NpolRuleDelete) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.RuleID)
	return buf.Bytes(), nil
}
func (m *NpolRuleDelete) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.RuleID = buf.DecodeUint32()
	return nil
}

// NpolRuleDeleteReply defines message 'npol_rule_delete_reply'.
type NpolRuleDeleteReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *NpolRuleDeleteReply) Reset()               { *m = NpolRuleDeleteReply{} }
func (*NpolRuleDeleteReply) GetMessageName() string { return "npol_rule_delete_reply" }
func (*NpolRuleDeleteReply) GetCrcString() string   { return "e8d4e804" }
func (*NpolRuleDeleteReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *NpolRuleDeleteReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *NpolRuleDeleteReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *NpolRuleDeleteReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// NpolRuleUpdate defines message 'npol_rule_update'.
type NpolRuleUpdate struct {
	RuleID uint32   `binapi:"u32,name=rule_id" json:"rule_id,omitempty"`
	Rule   NpolRule `binapi:"npol_rule,name=rule" json:"rule,omitempty"`
}

func (m *NpolRuleUpdate) Reset()               { *m = NpolRuleUpdate{} }
func (*NpolRuleUpdate) GetMessageName() string { return "npol_rule_update" }
func (*NpolRuleUpdate) GetCrcString() string   { return "e38bffe2" }
func (*NpolRuleUpdate) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *NpolRuleUpdate) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.RuleID
	size += 1 // m.Rule.Action
	for j2 := 0; j2 < 3; j2++ {
		size += 4 // m.Rule.Filters[j2].Value
		size += 1 // m.Rule.Filters[j2].Type
		size += 1 // m.Rule.Filters[j2].ShouldMatch
	}
	size += 4 // m.Rule.NumEntries
	for j2 := 0; j2 < len(m.Rule.Matches); j2++ {
		var s2 NpolRuleEntry
		_ = s2
		if j2 < len(m.Rule.Matches) {
			s2 = m.Rule.Matches[j2]
		}
		size += 1      // s2.IsSrc
		size += 1      // s2.IsNot
		size += 1      // s2.Type
		size += 1 * 18 // s2.Data
	}
	return size
}
func (m *NpolRuleUpdate) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.RuleID)
	buf.EncodeUint8(uint8(m.Rule.Action))
	for j1 := 0; j1 < 3; j1++ {
		buf.EncodeUint32(m.Rule.Filters[j1].Value)
		buf.EncodeUint8(uint8(m.Rule.Filters[j1].Type))
		buf.EncodeUint8(m.Rule.Filters[j1].ShouldMatch)
	}
	buf.EncodeUint32(uint32(len(m.Rule.Matches)))
	for j1 := 0; j1 < len(m.Rule.Matches); j1++ {
		var v1 NpolRuleEntry // Matches
		if j1 < len(m.Rule.Matches) {
			v1 = m.Rule.Matches[j1]
		}
		buf.EncodeBool(v1.IsSrc)
		buf.EncodeBool(v1.IsNot)
		buf.EncodeUint8(uint8(v1.Type))
		buf.EncodeBytes(v1.Data.XXX_UnionData[:], 18)
	}
	return buf.Bytes(), nil
}
func (m *NpolRuleUpdate) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.RuleID = buf.DecodeUint32()
	m.Rule.Action = NpolRuleAction(buf.DecodeUint8())
	for j1 := 0; j1 < 3; j1++ {
		m.Rule.Filters[j1].Value = buf.DecodeUint32()
		m.Rule.Filters[j1].Type = NpolRuleFilterType(buf.DecodeUint8())
		m.Rule.Filters[j1].ShouldMatch = buf.DecodeUint8()
	}
	m.Rule.NumEntries = buf.DecodeUint32()
	m.Rule.Matches = make([]NpolRuleEntry, m.Rule.NumEntries)
	for j1 := 0; j1 < len(m.Rule.Matches); j1++ {
		m.Rule.Matches[j1].IsSrc = buf.DecodeBool()
		m.Rule.Matches[j1].IsNot = buf.DecodeBool()
		m.Rule.Matches[j1].Type = NpolEntryType(buf.DecodeUint8())
		copy(m.Rule.Matches[j1].Data.XXX_UnionData[:], buf.DecodeBytes(18))
	}
	return nil
}

// NpolRuleUpdateReply defines message 'npol_rule_update_reply'.
type NpolRuleUpdateReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *NpolRuleUpdateReply) Reset()               { *m = NpolRuleUpdateReply{} }
func (*NpolRuleUpdateReply) GetMessageName() string { return "npol_rule_update_reply" }
func (*NpolRuleUpdateReply) GetCrcString() string   { return "e8d4e804" }
func (*NpolRuleUpdateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *NpolRuleUpdateReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *NpolRuleUpdateReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *NpolRuleUpdateReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

func init() { file_npol_binapi_init() }
func file_npol_binapi_init() {
	api.RegisterMessage((*NpolConfigurePolicies)(nil), "npol_configure_policies_66fe1335")
	api.RegisterMessage((*NpolConfigurePoliciesReply)(nil), "npol_configure_policies_reply_e8d4e804")
	api.RegisterMessage((*NpolGetVersion)(nil), "npol_get_version_51077d14")
	api.RegisterMessage((*NpolGetVersionReply)(nil), "npol_get_version_reply_9b32cf86")
	api.RegisterMessage((*NpolIpsetAddDelMembers)(nil), "npol_ipset_add_del_members_8ad1b2ed")
	api.RegisterMessage((*NpolIpsetAddDelMembersReply)(nil), "npol_ipset_add_del_members_reply_e8d4e804")
	api.RegisterMessage((*NpolIpsetCreate)(nil), "npol_ipset_create_f948b404")
	api.RegisterMessage((*NpolIpsetCreateReply)(nil), "npol_ipset_create_reply_6a43f193")
	api.RegisterMessage((*NpolIpsetDelete)(nil), "npol_ipset_delete_ceacdbcb")
	api.RegisterMessage((*NpolIpsetDeleteReply)(nil), "npol_ipset_delete_reply_e8d4e804")
	api.RegisterMessage((*NpolPolicyCreate)(nil), "npol_policy_create_3441bb97")
	api.RegisterMessage((*NpolPolicyCreateReply)(nil), "npol_policy_create_reply_90f27405")
	api.RegisterMessage((*NpolPolicyDelete)(nil), "npol_policy_delete_ad833868")
	api.RegisterMessage((*NpolPolicyDeleteReply)(nil), "npol_policy_delete_reply_e8d4e804")
	api.RegisterMessage((*NpolPolicyUpdate)(nil), "npol_policy_update_21a5f7ef")
	api.RegisterMessage((*NpolPolicyUpdateReply)(nil), "npol_policy_update_reply_e8d4e804")
	api.RegisterMessage((*NpolRuleCreate)(nil), "npol_rule_create_f113de45")
	api.RegisterMessage((*NpolRuleCreateReply)(nil), "npol_rule_create_reply_b48f8052")
	api.RegisterMessage((*NpolRuleDelete)(nil), "npol_rule_delete_d19bb6be")
	api.RegisterMessage((*NpolRuleDeleteReply)(nil), "npol_rule_delete_reply_e8d4e804")
	api.RegisterMessage((*NpolRuleUpdate)(nil), "npol_rule_update_e38bffe2")
	api.RegisterMessage((*NpolRuleUpdateReply)(nil), "npol_rule_update_reply_e8d4e804")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*NpolConfigurePolicies)(nil),
		(*NpolConfigurePoliciesReply)(nil),
		(*NpolGetVersion)(nil),
		(*NpolGetVersionReply)(nil),
		(*NpolIpsetAddDelMembers)(nil),
		(*NpolIpsetAddDelMembersReply)(nil),
		(*NpolIpsetCreate)(nil),
		(*NpolIpsetCreateReply)(nil),
		(*NpolIpsetDelete)(nil),
		(*NpolIpsetDeleteReply)(nil),
		(*NpolPolicyCreate)(nil),
		(*NpolPolicyCreateReply)(nil),
		(*NpolPolicyDelete)(nil),
		(*NpolPolicyDeleteReply)(nil),
		(*NpolPolicyUpdate)(nil),
		(*NpolPolicyUpdateReply)(nil),
		(*NpolRuleCreate)(nil),
		(*NpolRuleCreateReply)(nil),
		(*NpolRuleDelete)(nil),
		(*NpolRuleDeleteReply)(nil),
		(*NpolRuleUpdate)(nil),
		(*NpolRuleUpdateReply)(nil),
	}
}
