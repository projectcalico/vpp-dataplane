// Code generated by GoVPP's binapi-generator. DO NOT EDIT.

package npol

import (
	"context"

	api "go.fd.io/govpp/api"
)

// RPCService defines RPC service npol.
type RPCService interface {
	NpolConfigurePolicies(ctx context.Context, in *NpolConfigurePolicies) (*NpolConfigurePoliciesReply, error)
	NpolGetVersion(ctx context.Context, in *NpolGetVersion) (*NpolGetVersionReply, error)
	NpolIpsetAddDelMembers(ctx context.Context, in *NpolIpsetAddDelMembers) (*NpolIpsetAddDelMembersReply, error)
	NpolIpsetCreate(ctx context.Context, in *NpolIpsetCreate) (*NpolIpsetCreateReply, error)
	NpolIpsetDelete(ctx context.Context, in *NpolIpsetDelete) (*NpolIpsetDeleteReply, error)
	NpolPolicyCreate(ctx context.Context, in *NpolPolicyCreate) (*NpolPolicyCreateReply, error)
	NpolPolicyDelete(ctx context.Context, in *NpolPolicyDelete) (*NpolPolicyDeleteReply, error)
	NpolPolicyUpdate(ctx context.Context, in *NpolPolicyUpdate) (*NpolPolicyUpdateReply, error)
	NpolRuleCreate(ctx context.Context, in *NpolRuleCreate) (*NpolRuleCreateReply, error)
	NpolRuleDelete(ctx context.Context, in *NpolRuleDelete) (*NpolRuleDeleteReply, error)
	NpolRuleUpdate(ctx context.Context, in *NpolRuleUpdate) (*NpolRuleUpdateReply, error)
}

type serviceClient struct {
	conn api.Connection
}

func NewServiceClient(conn api.Connection) RPCService {
	return &serviceClient{conn}
}

func (c *serviceClient) NpolConfigurePolicies(ctx context.Context, in *NpolConfigurePolicies) (*NpolConfigurePoliciesReply, error) {
	out := new(NpolConfigurePoliciesReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) NpolGetVersion(ctx context.Context, in *NpolGetVersion) (*NpolGetVersionReply, error) {
	out := new(NpolGetVersionReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) NpolIpsetAddDelMembers(ctx context.Context, in *NpolIpsetAddDelMembers) (*NpolIpsetAddDelMembersReply, error) {
	out := new(NpolIpsetAddDelMembersReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) NpolIpsetCreate(ctx context.Context, in *NpolIpsetCreate) (*NpolIpsetCreateReply, error) {
	out := new(NpolIpsetCreateReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) NpolIpsetDelete(ctx context.Context, in *NpolIpsetDelete) (*NpolIpsetDeleteReply, error) {
	out := new(NpolIpsetDeleteReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) NpolPolicyCreate(ctx context.Context, in *NpolPolicyCreate) (*NpolPolicyCreateReply, error) {
	out := new(NpolPolicyCreateReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) NpolPolicyDelete(ctx context.Context, in *NpolPolicyDelete) (*NpolPolicyDeleteReply, error) {
	out := new(NpolPolicyDeleteReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) NpolPolicyUpdate(ctx context.Context, in *NpolPolicyUpdate) (*NpolPolicyUpdateReply, error) {
	out := new(NpolPolicyUpdateReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) NpolRuleCreate(ctx context.Context, in *NpolRuleCreate) (*NpolRuleCreateReply, error) {
	out := new(NpolRuleCreateReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) NpolRuleDelete(ctx context.Context, in *NpolRuleDelete) (*NpolRuleDeleteReply, error) {
	out := new(NpolRuleDeleteReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) NpolRuleUpdate(ctx context.Context, in *NpolRuleUpdate) (*NpolRuleUpdateReply, error) {
	out := new(NpolRuleUpdateReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}
