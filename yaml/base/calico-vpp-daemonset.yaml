kind: Namespace
apiVersion: v1
metadata:
  name: calico-vpp-dataplane
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-vpp-node-sa
  namespace: calico-vpp-dataplane
---
# Source: calico/templates/calico-node-rbac.yaml
# Include a clusterrole for the calico-node DaemonSet,
# and bind it to the calico-node serviceaccount.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-vpp-node-role
rules:
  # The CNI plugin needs to get pods, nodes, and namespaces.
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - namespaces
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - endpoints
      - services
    verbs:
      # Used to discover service IPs for advertisement.
      - watch
      - list
      # Used to discover Typhas.
      - get
  # Pod CIDR auto-detection on kubeadm needs access to config maps.
  - apiGroups: [""]
    resources:
      - configmaps
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - nodes/status
    verbs:
      # Needed for clearing NodeNetworkUnavailable flag.
      - patch
      # Calico stores some configuration information in node annotations.
      - update
  # Watch for changes to Kubernetes NetworkPolicies.
  - apiGroups: ["networking.k8s.io"]
    resources:
      - networkpolicies
    verbs:
      - watch
      - list
  # Used by Calico for policy information.
  - apiGroups: [""]
    resources:
      - pods
      - namespaces
      - serviceaccounts
    verbs:
      - list
      - watch
  # The CNI plugin patches pods/status.
  - apiGroups: [""]
    resources:
      - pods/status
    verbs:
      - patch
  # Calico monitors various CRDs for config.
  - apiGroups: ["crd.projectcalico.org"]
    resources:
      - globalfelixconfigs
      - felixconfigurations
      - bgppeers
      - globalbgpconfigs
      - bgpconfigurations
      - ippools
      - ipamblocks
      - globalnetworkpolicies
      - globalnetworksets
      - networkpolicies
      - networksets
      - clusterinformations
      - hostendpoints
      - blockaffinities
    verbs:
      - get
      - list
      - watch
  # Calico must create and update some CRDs on startup.
  # - apiGroups: ["crd.projectcalico.org"]
  #   resources:
  #     - ippools
  #     - felixconfigurations
  #     - clusterinformations
  #   verbs:
  #     - create
  #     - update
  # Calico stores some configuration information on the node.
  - apiGroups: [""]
    resources:
      - nodes
    verbs:
      - get
      - list
      - watch
  # These permissions are required for Calico CNI to perform IPAM allocations.
  - apiGroups: ["crd.projectcalico.org"]
    resources:
      - blockaffinities
      - ipamblocks
      - ipamhandles
    verbs:
      - get
      - list
      - create
      - update
      - delete
  - apiGroups: ["crd.projectcalico.org"]
    resources:
      - ipamconfigs
    verbs:
      - get
  # Block affinities must also be watchable by confd for route aggregation.
  - apiGroups: ["crd.projectcalico.org"]
    resources:
      - blockaffinities
    verbs:
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: calico-vpp-node
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-vpp-node-role
subjects:
- kind: ServiceAccount
  name: calico-vpp-node-sa
  namespace: calico-vpp-dataplane
---
# dedicated configmap for VPP settings
kind: ConfigMap
apiVersion: v1
metadata:
  name: calico-vpp-config
  namespace: calico-vpp-dataplane
data:
  # K8s service prefix. We currently cannot retrieve this from the API,
  # so it must be manually configured
  SERVICE_PREFIX: 10.96.0.0/12

  # Configures parameters for calicovpp agent and vpp manager
  CALICOVPP_INTERFACES: |-
    {
      "maxPodIfSpec": {
        "rx": 10, "tx": 10, "rxqsz": 1024, "txqsz": 1024
      },
      "defaultPodIfSpec": {
        "rx": 1, "tx":1, "isl3": true
      },
      "vppHostTapSpec": {
        "rx": 1, "tx":1, "rxqsz": 1024, "txqsz": 1024, "isl3": false
      },
      "uplinkInterfaces": [
        {
          "interfaceName": "eth1",
          "vppDriver": "af_packet"
        }
      ]
    }
  CALICOVPP_INITIAL_CONFIG: |-
    {
      "vppStartupSleepSeconds": 1,
      "corePattern": "/var/lib/vpp/vppcore.%e.%p"
    }

  # Configuration template for VPP.
  CALICOVPP_CONFIG_TEMPLATE: |-
    unix {
      nodaemon
      full-coredump
      cli-listen /var/run/vpp/cli.sock
      pidfile /run/vpp/vpp.pid
      exec /etc/vpp/startup.exec
    }
    api-trace { on }
    cpu {
        workers 0
    }
    socksvr {
        socket-name /var/run/vpp/vpp-api.sock
    }
    plugins {
        plugin default { enable }
        plugin dpdk_plugin.so { disable }
        plugin calico_plugin.so { enable }
        plugin ping_plugin.so { disable }
        plugin dispatch_trace_plugin.so { enable }
    }
    buffers {
      buffers-per-numa 131072
    }

---
# VPP version of the calico node daemon
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: calico-vpp-node
  namespace: calico-vpp-dataplane
  labels:
    k8s-app: calico-vpp-node
spec:
  selector:
    matchLabels:
      k8s-app: calico-vpp-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: calico-vpp-node
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      hostNetwork: true
      # This is required for VPP to access the other pods net namespaces through /proc .
      hostPID: true
      tolerations:
        # Make sure calico-node gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      serviceAccountName: calico-vpp-node-sa
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 10
      priorityClassName: system-node-critical
      containers:
        - name: agent
          image: docker.io/calicovpp/agent:latest
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: calico-vpp-config
          env:
            # Use Kubernetes API as the backing datastore.
            - name: DATASTORE_TYPE
              value: "kubernetes"
            # Wait for the datastore.
            - name: WAIT_FOR_DATASTORE
              value: "true"
            # Set based on the k8s node name.
            - name: NODENAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext:
            # TODO check required
            privileged: true
          resources:
            requests:
              cpu: 250m
          volumeMounts:
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /var/lib/calico/felix-plugins
              name: felix-plugins
              readOnly: false
            - name: vpp-rundir
              mountPath: /var/run/vpp
            - name: netns
              mountPath: /run/netns/
              mountPropagation: Bidirectional
        - name: vpp
          image: docker.io/calicovpp/vpp:latest
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          envFrom:
            - configMapRef:
                name: calico-vpp-config
          env:
            # Use Kubernetes API as the backing datastore.
            - name: DATASTORE_TYPE
              value: "kubernetes"
            # Wait for the datastore.
            - name: WAIT_FOR_DATASTORE
              value: "true"
            # Set based on the k8s node name.
            - name: NODENAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          resources:
            requests:
              cpu: 500m
              memory: 512Mi
          volumeMounts:
            - name: lib-firmware
              mountPath: /lib/firmware
            - name: vpp-rundir
              mountPath: /var/run/vpp
            - name: vpp-data
              mountPath: /var/lib/vpp
            - name: vpp-config
              mountPath: /etc/vpp
            - name: devices
              mountPath: /dev
            - name: hostsys
              mountPath: /sys
            - name: netns
              mountPath: /run/netns/
              mountPropagation: Bidirectional
            - mountPath: /host
              name: host-root
      volumes:
        - name: lib-firmware
          hostPath:
            path: /lib/firmware
        - name: vpp-rundir
          hostPath:
            path: /var/run/vpp
        - name: vpp-data
          hostPath:
            type: DirectoryOrCreate
            path: /var/lib/vpp
        - name: vpp-config
          hostPath:
            path: /etc/vpp
        - name: devices
          hostPath:
            path: /dev
        - name: hostsys
          hostPath:
            path: /sys
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
        - name: netns
          hostPath:
            path: /run/netns
        - name: felix-plugins
          hostPath:
            path: /var/lib/calico/felix-plugins
        - hostPath:
            path: /
          name: host-root
